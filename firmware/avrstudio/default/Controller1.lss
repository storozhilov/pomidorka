
Controller1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000028  00800100  00001816  000018aa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001816  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001e8  00800128  00800128  000018d2  2**0
                  ALLOC
  3 .debug_aranges 00000160  00000000  00000000  000018d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000a33  00000000  00000000  00001a32  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001fac  00000000  00000000  00002465  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000c1b  00000000  00000000  00004411  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001906  00000000  00000000  0000502c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000600  00000000  00000000  00006934  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000aae  00000000  00000000  00006f34  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000cdb  00000000  00000000  000079e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  000086bd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
       2:	33 c0       	rjmp	.+102    	; 0x6a <__bad_interrupt>
       4:	32 c0       	rjmp	.+100    	; 0x6a <__bad_interrupt>
       6:	31 c0       	rjmp	.+98     	; 0x6a <__bad_interrupt>
       8:	30 c0       	rjmp	.+96     	; 0x6a <__bad_interrupt>
       a:	2f c0       	rjmp	.+94     	; 0x6a <__bad_interrupt>
       c:	2e c0       	rjmp	.+92     	; 0x6a <__bad_interrupt>
       e:	2d c0       	rjmp	.+90     	; 0x6a <__bad_interrupt>
      10:	2c c0       	rjmp	.+88     	; 0x6a <__bad_interrupt>
      12:	62 c4       	rjmp	.+2244   	; 0x8d8 <__vector_9>
      14:	2a c0       	rjmp	.+84     	; 0x6a <__bad_interrupt>
      16:	89 c4       	rjmp	.+2322   	; 0x92a <__vector_11>
      18:	28 c0       	rjmp	.+80     	; 0x6a <__bad_interrupt>
      1a:	35 c4       	rjmp	.+2154   	; 0x886 <__vector_13>
      1c:	26 c0       	rjmp	.+76     	; 0x6a <__bad_interrupt>
      1e:	25 c0       	rjmp	.+74     	; 0x6a <__bad_interrupt>
      20:	09 c4       	rjmp	.+2066   	; 0x834 <__vector_16>
      22:	23 c0       	rjmp	.+70     	; 0x6a <__bad_interrupt>
      24:	e3 c0       	rjmp	.+454    	; 0x1ec <__vector_18>
      26:	21 c0       	rjmp	.+66     	; 0x6a <__bad_interrupt>
      28:	0c c1       	rjmp	.+536    	; 0x242 <__vector_20>
      2a:	de c5       	rjmp	.+3004   	; 0xbe8 <__vector_21>
      2c:	1e c0       	rjmp	.+60     	; 0x6a <__bad_interrupt>
      2e:	1d c0       	rjmp	.+58     	; 0x6a <__bad_interrupt>
      30:	1c c0       	rjmp	.+56     	; 0x6a <__bad_interrupt>
      32:	1b c0       	rjmp	.+54     	; 0x6a <__bad_interrupt>

00000034 <__ctors_end>:
      34:	11 24       	eor	r1, r1
      36:	1f be       	out	0x3f, r1	; 63
      38:	cf ef       	ldi	r28, 0xFF	; 255
      3a:	d4 e0       	ldi	r29, 0x04	; 4
      3c:	de bf       	out	0x3e, r29	; 62
      3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_copy_data>:
      40:	11 e0       	ldi	r17, 0x01	; 1
      42:	a0 e0       	ldi	r26, 0x00	; 0
      44:	b1 e0       	ldi	r27, 0x01	; 1
      46:	e6 e1       	ldi	r30, 0x16	; 22
      48:	f8 e1       	ldi	r31, 0x18	; 24
      4a:	02 c0       	rjmp	.+4      	; 0x50 <.do_copy_data_start>

0000004c <.do_copy_data_loop>:
      4c:	05 90       	lpm	r0, Z+
      4e:	0d 92       	st	X+, r0

00000050 <.do_copy_data_start>:
      50:	a8 32       	cpi	r26, 0x28	; 40
      52:	b1 07       	cpc	r27, r17
      54:	d9 f7       	brne	.-10     	; 0x4c <.do_copy_data_loop>

00000056 <__do_clear_bss>:
      56:	13 e0       	ldi	r17, 0x03	; 3
      58:	a8 e2       	ldi	r26, 0x28	; 40
      5a:	b1 e0       	ldi	r27, 0x01	; 1
      5c:	01 c0       	rjmp	.+2      	; 0x60 <.do_clear_bss_start>

0000005e <.do_clear_bss_loop>:
      5e:	1d 92       	st	X+, r1

00000060 <.do_clear_bss_start>:
      60:	a0 31       	cpi	r26, 0x10	; 16
      62:	b1 07       	cpc	r27, r17
      64:	e1 f7       	brne	.-8      	; 0x5e <.do_clear_bss_loop>
      66:	02 d0       	rcall	.+4      	; 0x6c <main>
      68:	d4 cb       	rjmp	.-2136   	; 0xfffff812 <__eeprom_end+0xff7ef812>

0000006a <__bad_interrupt>:
      6a:	ca cf       	rjmp	.-108    	; 0x0 <__vectors>

0000006c <main>:

extern volatile BYTE T1_100mls;

char txt[32];
int main()
{
      6c:	ef 92       	push	r14
      6e:	ff 92       	push	r15
      70:	0f 93       	push	r16
      72:	1f 93       	push	r17
      74:	df 93       	push	r29
      76:	cf 93       	push	r28
      78:	00 d0       	rcall	.+0      	; 0x7a <main+0xe>
      7a:	cd b7       	in	r28, 0x3d	; 61
      7c:	de b7       	in	r29, 0x3e	; 62

 wdt_enable(WDTO_1S);
      7e:	2e e0       	ldi	r18, 0x0E	; 14
      80:	88 e1       	ldi	r24, 0x18	; 24
      82:	90 e0       	ldi	r25, 0x00	; 0
      84:	0f b6       	in	r0, 0x3f	; 63
      86:	f8 94       	cli
      88:	a8 95       	wdr
      8a:	80 93 60 00 	sts	0x0060, r24
      8e:	0f be       	out	0x3f, r0	; 63
      90:	20 93 60 00 	sts	0x0060, r18


 DDRB = (LOAD1 | LOAD1_DIRECTION);
      94:	83 e0       	ldi	r24, 0x03	; 3
      96:	84 b9       	out	0x04, r24	; 4
 DDRC = (LOAD2 | LOAD3);
      98:	86 e0       	ldi	r24, 0x06	; 6
      9a:	87 b9       	out	0x07, r24	; 7
 DDRD = (TX_RX);
      9c:	80 e8       	ldi	r24, 0x80	; 128
      9e:	8a b9       	out	0x0a, r24	; 10

 // Подтяги для входов.
 PORTD = IN1 | IN3 | IN4 | IN5 | IN6;
      a0:	8c e7       	ldi	r24, 0x7C	; 124
      a2:	8b b9       	out	0x0b, r24	; 11
 PORTC = IN2;
      a4:	88 e0       	ldi	r24, 0x08	; 8
      a6:	88 b9       	out	0x08, r24	; 8


 UART_Init();       // Инициализируем модуль UART.
      a8:	64 d0       	rcall	.+200    	; 0x172 <UART_Init>
 MODBUS_Init();     // Инициализируем модуль протокола ModBus.
      aa:	44 d1       	rcall	.+648    	; 0x334 <MODBUS_Init>
 T0_Init();         // Инициализируем таймер 0.
      ac:	78 d3       	rcall	.+1776   	; 0x79e <T0_Init>
 T1_Init();         // Инициализируем таймер 1.
      ae:	83 d3       	rcall	.+1798   	; 0x7b6 <T1_Init>
 T1_Start();
      b0:	ab d3       	rcall	.+1878   	; 0x808 <T1_Start>
 ADC_Init();        // Инициализируем модуль АЦП.
      b2:	38 d5       	rcall	.+2672   	; 0xb24 <ADC_Init>
 LOAD_Init();       // Инициализируем модуль подключения нагрузки.
      b4:	7f d8       	rcall	.-3842   	; 0xfffff1b4 <__eeprom_end+0xff7ef1b4>


 // Устанавливаем обработчик входящих данных с УАРТ на протокол MODBUS.
 UART_SetFuncReceive(MODBUS_Receive);
      b6:	80 ee       	ldi	r24, 0xE0	; 224
      b8:	91 e0       	ldi	r25, 0x01	; 1
      ba:	93 d0       	rcall	.+294    	; 0x1e2 <UART_SetFuncReceive>

 // Устанавливаем обработчик переполнения таймера0 на протокол MODBUS.
 T0_SetFuncOverflow(MODBUS_Execute);
      bc:	8e e6       	ldi	r24, 0x6E	; 110
      be:	92 e0       	ldi	r25, 0x02	; 2
      c0:	5f d3       	rcall	.+1726   	; 0x780 <T0_SetFuncOverflow>

 // Устанавливаем обработчики для модуля MODBUS.
 MODBUS_SetFuncTimerClear(T0_Clear);
      c2:	82 e0       	ldi	r24, 0x02	; 2
      c4:	94 e0       	ldi	r25, 0x04	; 4
      c6:	13 d1       	rcall	.+550    	; 0x2ee <MODBUS_SetFuncTimerClear>
 MODBUS_SetFuncTimerStart(T0_Start);
      c8:	8d ef       	ldi	r24, 0xFD	; 253
      ca:	93 e0       	ldi	r25, 0x03	; 3
      cc:	15 d1       	rcall	.+554    	; 0x2f8 <MODBUS_SetFuncTimerStart>
 MODBUS_SetFuncTimerStop(T0_Stop);
      ce:	80 e0       	ldi	r24, 0x00	; 0
      d0:	94 e0       	ldi	r25, 0x04	; 4
      d2:	17 d1       	rcall	.+558    	; 0x302 <MODBUS_SetFuncTimerStop>
 MODBUS_SetFuncWriteReg(PERFORMER_WriteRegister);
      d4:	81 ee       	ldi	r24, 0xE1	; 225
      d6:	94 e0       	ldi	r25, 0x04	; 4
      d8:	19 d1       	rcall	.+562    	; 0x30c <MODBUS_SetFuncWriteReg>
 MODBUS_SetFuncReadRegs(PERFORMER_ReadRegister);
      da:	82 ed       	ldi	r24, 0xD2	; 210
      dc:	94 e0       	ldi	r25, 0x04	; 4
      de:	1b d1       	rcall	.+566    	; 0x316 <MODBUS_SetFuncReadRegs>
 MODBUS_SetFuncWriteCoil(PERFORMER_WriteCoil);
      e0:	8a e5       	ldi	r24, 0x5A	; 90
      e2:	95 e0       	ldi	r25, 0x05	; 5
      e4:	1d d1       	rcall	.+570    	; 0x320 <MODBUS_SetFuncWriteCoil>
 MODBUS_SetFuncReadCoils(PERFORMER_ReadCoils);
      e6:	8c ee       	ldi	r24, 0xEC	; 236
      e8:	94 e0       	ldi	r25, 0x04	; 4
      ea:	1f d1       	rcall	.+574    	; 0x32a <MODBUS_SetFuncReadCoils>


 // Устанавливаем обработчик переполнения таймера1 (100 млс) на точку входа модуля нагрузки.
 T1_SetFuncOverflow(LOAD_Timer_Interrupt_100_mls);
      ec:	85 e0       	ldi	r24, 0x05	; 5
      ee:	99 e0       	ldi	r25, 0x09	; 9
      f0:	4c d3       	rcall	.+1688   	; 0x78a <T1_SetFuncOverflow>


 MODBUS_SetAddress(1);
      f2:	81 e0       	ldi	r24, 0x01	; 1
      f4:	45 d1       	rcall	.+650    	; 0x380 <MODBUS_SetAddress>

 sei();
      f6:	78 94       	sei

 UART_SendTextAsynchronously("Controller1, version 1.0.1\r\n");
      f8:	80 e0       	ldi	r24, 0x00	; 0
      fa:	91 e0       	ldi	r25, 0x01	; 1
      fc:	d4 d0       	rcall	.+424    	; 0x2a6 <UART_SendTextAsynchronously>
 UART_WaitTransmitIsEmpty();
      fe:	6e d0       	rcall	.+220    	; 0x1dc <UART_WaitTransmitIsEmpty>

 BYTE b[] = {6, 7};
     100:	86 e0       	ldi	r24, 0x06	; 6
     102:	89 83       	std	Y+1, r24	; 0x01
     104:	87 e0       	ldi	r24, 0x07	; 7
     106:	8a 83       	std	Y+2, r24	; 0x02
 ADC_Start(b, 2);
     108:	ce 01       	movw	r24, r28
     10a:	01 96       	adiw	r24, 0x01	; 1
     10c:	62 e0       	ldi	r22, 0x02	; 2
     10e:	53 d5       	rcall	.+2726   	; 0xbb6 <ADC_Start>

 DS18B20_Init();
     110:	4e d8       	rcall	.-3940   	; 0xfffff1ae <__eeprom_end+0xff7ef1ae>

     if (!IS_IN6)
      if (T1_100mls >= 2)
		{
			T1_100mls = 0;
			sprintf(txt, "ADC6=%i\r\n", ADC_GetValue(6));
     112:	01 e3       	ldi	r16, 0x31	; 49
     114:	11 e0       	ldi	r17, 0x01	; 1
     116:	8d e1       	ldi	r24, 0x1D	; 29
     118:	e8 2e       	mov	r14, r24
     11a:	81 e0       	ldi	r24, 0x01	; 1
     11c:	f8 2e       	mov	r15, r24


 //MODBUS_EmulateReadRegister();
 while(1)
 {
  wdt_reset();
     11e:	a8 95       	wdr

     DS18B20_Execute();
     120:	14 d8       	rcall	.-4056   	; 0xfffff14a <__eeprom_end+0xff7ef14a>
     PERFORMER_Execute();
     122:	69 d4       	rcall	.+2258   	; 0x9f6 <PERFORMER_Execute>

//     if (!IS_IN4) LOAD2_ON; else LOAD2_OFF;

     if (!IS_IN6)
     124:	4d 99       	sbic	0x09, 5	; 9
     126:	fb cf       	rjmp	.-10     	; 0x11e <main+0xb2>
      if (T1_100mls >= 2)
     128:	80 91 a8 01 	lds	r24, 0x01A8
     12c:	82 30       	cpi	r24, 0x02	; 2
     12e:	b8 f3       	brcs	.-18     	; 0x11e <main+0xb2>
		{
			T1_100mls = 0;
     130:	10 92 a8 01 	sts	0x01A8, r1
			sprintf(txt, "ADC6=%i\r\n", ADC_GetValue(6));
     134:	86 e0       	ldi	r24, 0x06	; 6
     136:	03 d5       	rcall	.+2566   	; 0xb3e <ADC_GetValue>
     138:	00 d0       	rcall	.+0      	; 0x13a <main+0xce>
     13a:	00 d0       	rcall	.+0      	; 0x13c <main+0xd0>
     13c:	00 d0       	rcall	.+0      	; 0x13e <main+0xd2>
     13e:	ed b7       	in	r30, 0x3d	; 61
     140:	fe b7       	in	r31, 0x3e	; 62
     142:	31 96       	adiw	r30, 0x01	; 1
     144:	ad b7       	in	r26, 0x3d	; 61
     146:	be b7       	in	r27, 0x3e	; 62
     148:	12 96       	adiw	r26, 0x02	; 2
     14a:	1c 93       	st	X, r17
     14c:	0e 93       	st	-X, r16
     14e:	11 97       	sbiw	r26, 0x01	; 1
     150:	f3 82       	std	Z+3, r15	; 0x03
     152:	e2 82       	std	Z+2, r14	; 0x02
     154:	95 83       	std	Z+5, r25	; 0x05
     156:	84 83       	std	Z+4, r24	; 0x04
     158:	96 d8       	rcall	.-3796   	; 0xfffff286 <__eeprom_end+0xff7ef286>
            UART_SendTextAsynchronously(txt); UART_WaitTransmitIsEmpty();
     15a:	8d b7       	in	r24, 0x3d	; 61
     15c:	9e b7       	in	r25, 0x3e	; 62
     15e:	06 96       	adiw	r24, 0x06	; 6
     160:	0f b6       	in	r0, 0x3f	; 63
     162:	f8 94       	cli
     164:	9e bf       	out	0x3e, r25	; 62
     166:	0f be       	out	0x3f, r0	; 63
     168:	8d bf       	out	0x3d, r24	; 61
     16a:	c8 01       	movw	r24, r16
     16c:	9c d0       	rcall	.+312    	; 0x2a6 <UART_SendTextAsynchronously>
     16e:	36 d0       	rcall	.+108    	; 0x1dc <UART_WaitTransmitIsEmpty>
     170:	d6 cf       	rjmp	.-84     	; 0x11e <main+0xb2>

00000172 <UART_Init>:

void UART_Init()
{

#ifdef UART_RS485
    RS485_RX_ON;
     172:	5f 98       	cbi	0x0b, 7	; 11
#endif

 // 57600, 8 бит, четность even


 UBRR0L = 0x0F;
     174:	8f e0       	ldi	r24, 0x0F	; 15
     176:	80 93 c4 00 	sts	0x00C4, r24
 UBRR0H = 0x00;
     17a:	10 92 c5 00 	sts	0x00C5, r1
 UCSR0C = (1 << UPM01) | (0 << UPM00) | 0x06; // Event parity + 8 bit
     17e:	86 e2       	ldi	r24, 0x26	; 38
     180:	80 93 c2 00 	sts	0x00C2, r24
 UCSR0A = 0x40;
     184:	80 e4       	ldi	r24, 0x40	; 64
     186:	80 93 c0 00 	sts	0x00C0, r24
 UCSR0B = (1 << TXCIE0 | 1 << RXCIE0);              // Прерывание
     18a:	e1 ec       	ldi	r30, 0xC1	; 193
     18c:	f0 e0       	ldi	r31, 0x00	; 0
     18e:	80 ec       	ldi	r24, 0xC0	; 192
     190:	80 83       	st	Z, r24
 UCSR0B = UCSR0B | (1 << RXEN0) | (1 << TXEN0);     //
     192:	80 81       	ld	r24, Z
     194:	88 61       	ori	r24, 0x18	; 24
     196:	80 83       	st	Z, r24

}
     198:	08 95       	ret

0000019a <UART_SendDataAsynchronously>:
    while (!(UCSR0A & (1 << UDRE0)));
    UDR0    = *(uart_pTransmit++);
}

void UART_SendDataAsynchronously(BYTE *d, WORD len)
{
     19a:	28 2f       	mov	r18, r24
#ifdef UART_RS485
    RS485_TX_ON;
     19c:	5f 9a       	sbi	0x0b, 7	; 11
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     19e:	88 e1       	ldi	r24, 0x18	; 24
     1a0:	8a 95       	dec	r24
     1a2:	f1 f7       	brne	.-4      	; 0x1a0 <UART_SendDataAsynchronously+0x6>
	_delay_us(5);
#endif
    uart_pTransmit = d;
     1a4:	20 93 53 01 	sts	0x0153, r18
     1a8:	90 93 54 01 	sts	0x0154, r25
    uart_len  = len;
     1ac:	70 93 52 01 	sts	0x0152, r23
     1b0:	60 93 51 01 	sts	0x0151, r22
    while (!(UCSR0A & (1 << UDRE0)));
     1b4:	80 91 c0 00 	lds	r24, 0x00C0
     1b8:	85 ff       	sbrs	r24, 5
     1ba:	fc cf       	rjmp	.-8      	; 0x1b4 <UART_SendDataAsynchronously+0x1a>
    UDR0    = *(uart_pTransmit++);
     1bc:	e2 2f       	mov	r30, r18
     1be:	f9 2f       	mov	r31, r25
     1c0:	81 91       	ld	r24, Z+
     1c2:	80 93 c6 00 	sts	0x00C6, r24
     1c6:	f0 93 54 01 	sts	0x0154, r31
     1ca:	e0 93 53 01 	sts	0x0153, r30
}
     1ce:	08 95       	ret

000001d0 <UART_TransmitIsEmpty>:


BYTE UART_TransmitIsEmpty()
{
#ifdef UART_RS485
 	return  !(RS485_TX_STATUS);
     1d0:	8b b1       	in	r24, 0x0b	; 11
     1d2:	80 95       	com	r24
#else
    if (uart_len) return 0;
    return (UCSR0A & (1 << UDRE0));
#endif
}
     1d4:	88 1f       	adc	r24, r24
     1d6:	88 27       	eor	r24, r24
     1d8:	88 1f       	adc	r24, r24
     1da:	08 95       	ret

000001dc <UART_WaitTransmitIsEmpty>:

void UART_WaitTransmitIsEmpty()
{
    while(!UART_TransmitIsEmpty());
     1dc:	5f 99       	sbic	0x0b, 7	; 11
     1de:	fe cf       	rjmp	.-4      	; 0x1dc <UART_WaitTransmitIsEmpty>
}
     1e0:	08 95       	ret

000001e2 <UART_SetFuncReceive>:


void UART_SetFuncReceive(FuncReceive *func)
{
    funcReceive = func;
     1e2:	90 93 29 01 	sts	0x0129, r25
     1e6:	80 93 28 01 	sts	0x0128, r24
}
     1ea:	08 95       	ret

000001ec <__vector_18>:


//! Пришел 1 байт по UART
ISR(USART_RX_vect) 
{
     1ec:	1f 92       	push	r1
     1ee:	0f 92       	push	r0
     1f0:	0f b6       	in	r0, 0x3f	; 63
     1f2:	0f 92       	push	r0
     1f4:	11 24       	eor	r1, r1
     1f6:	2f 93       	push	r18
     1f8:	3f 93       	push	r19
     1fa:	4f 93       	push	r20
     1fc:	5f 93       	push	r21
     1fe:	6f 93       	push	r22
     200:	7f 93       	push	r23
     202:	8f 93       	push	r24
     204:	9f 93       	push	r25
     206:	af 93       	push	r26
     208:	bf 93       	push	r27
     20a:	ef 93       	push	r30
     20c:	ff 93       	push	r31
    BYTE rec = UDR0;
     20e:	80 91 c6 00 	lds	r24, 0x00C6
    if (funcReceive) funcReceive(rec);
     212:	e0 91 28 01 	lds	r30, 0x0128
     216:	f0 91 29 01 	lds	r31, 0x0129
     21a:	30 97       	sbiw	r30, 0x00	; 0
     21c:	09 f0       	breq	.+2      	; 0x220 <__vector_18+0x34>
     21e:	09 95       	icall
}
     220:	ff 91       	pop	r31
     222:	ef 91       	pop	r30
     224:	bf 91       	pop	r27
     226:	af 91       	pop	r26
     228:	9f 91       	pop	r25
     22a:	8f 91       	pop	r24
     22c:	7f 91       	pop	r23
     22e:	6f 91       	pop	r22
     230:	5f 91       	pop	r21
     232:	4f 91       	pop	r20
     234:	3f 91       	pop	r19
     236:	2f 91       	pop	r18
     238:	0f 90       	pop	r0
     23a:	0f be       	out	0x3f, r0	; 63
     23c:	0f 90       	pop	r0
     23e:	1f 90       	pop	r1
     240:	18 95       	reti

00000242 <__vector_20>:


//! 1 байт по UART передан
ISR(USART_TX_vect)
{
     242:	1f 92       	push	r1
     244:	0f 92       	push	r0
     246:	0f b6       	in	r0, 0x3f	; 63
     248:	0f 92       	push	r0
     24a:	11 24       	eor	r1, r1
     24c:	8f 93       	push	r24
     24e:	9f 93       	push	r25
     250:	ef 93       	push	r30
     252:	ff 93       	push	r31
    if (--uart_len)
     254:	80 91 51 01 	lds	r24, 0x0151
     258:	90 91 52 01 	lds	r25, 0x0152
     25c:	01 97       	sbiw	r24, 0x01	; 1
     25e:	90 93 52 01 	sts	0x0152, r25
     262:	80 93 51 01 	sts	0x0151, r24
     266:	80 91 51 01 	lds	r24, 0x0151
     26a:	90 91 52 01 	lds	r25, 0x0152
     26e:	89 2b       	or	r24, r25
     270:	61 f0       	breq	.+24     	; 0x28a <__vector_20+0x48>
    {
        UDR0 = *(uart_pTransmit++);
     272:	e0 91 53 01 	lds	r30, 0x0153
     276:	f0 91 54 01 	lds	r31, 0x0154
     27a:	81 91       	ld	r24, Z+
     27c:	80 93 c6 00 	sts	0x00C6, r24
     280:	f0 93 54 01 	sts	0x0154, r31
     284:	e0 93 53 01 	sts	0x0153, r30
     288:	05 c0       	rjmp	.+10     	; 0x294 <__vector_20+0x52>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     28a:	81 ee       	ldi	r24, 0xE1	; 225
     28c:	92 e0       	ldi	r25, 0x02	; 2
     28e:	01 97       	sbiw	r24, 0x01	; 1
     290:	f1 f7       	brne	.-4      	; 0x28e <__vector_20+0x4c>
    } else {
        #ifdef UART_RS485
		_delay_us(200); // 200 микросекунд для передачи 11 бит на скорости 57600.
        RS485_RX_ON;
     292:	5f 98       	cbi	0x0b, 7	; 11
        #endif
    }

//  UCSR0B &= ~(1 << TXEN0);
//  UCSR0B |= (1 << RXEN0);
}
     294:	ff 91       	pop	r31
     296:	ef 91       	pop	r30
     298:	9f 91       	pop	r25
     29a:	8f 91       	pop	r24
     29c:	0f 90       	pop	r0
     29e:	0f be       	out	0x3f, r0	; 63
     2a0:	0f 90       	pop	r0
     2a2:	1f 90       	pop	r1
     2a4:	18 95       	reti

000002a6 <UART_SendTextAsynchronously>:
//        UART_SendByteSynchronously(txt[t++]);
//    }
//}

void UART_SendTextAsynchronously(char *txt)
{
     2a6:	28 2f       	mov	r18, r24
#ifdef UART_RS485
    RS485_TX_ON;
     2a8:	5f 9a       	sbi	0x0b, 7	; 11
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     2aa:	88 e1       	ldi	r24, 0x18	; 24
     2ac:	8a 95       	dec	r24
     2ae:	f1 f7       	brne	.-4      	; 0x2ac <UART_SendTextAsynchronously+0x6>
	_delay_us(5);
#endif
    uart_pTransmit = (BYTE *) txt;
     2b0:	20 93 53 01 	sts	0x0153, r18
     2b4:	90 93 54 01 	sts	0x0154, r25
    uart_len = strlen(txt);
     2b8:	a2 2f       	mov	r26, r18
     2ba:	b9 2f       	mov	r27, r25
     2bc:	fd 01       	movw	r30, r26
     2be:	01 90       	ld	r0, Z+
     2c0:	00 20       	and	r0, r0
     2c2:	e9 f7       	brne	.-6      	; 0x2be <UART_SendTextAsynchronously+0x18>
     2c4:	31 97       	sbiw	r30, 0x01	; 1
     2c6:	ea 1b       	sub	r30, r26
     2c8:	fb 0b       	sbc	r31, r27
     2ca:	f0 93 52 01 	sts	0x0152, r31
     2ce:	e0 93 51 01 	sts	0x0151, r30
    while (!(UCSR0A & (1 << UDRE0)));
     2d2:	80 91 c0 00 	lds	r24, 0x00C0
     2d6:	85 ff       	sbrs	r24, 5
     2d8:	fc cf       	rjmp	.-8      	; 0x2d2 <UART_SendTextAsynchronously+0x2c>
    UDR0    = *(uart_pTransmit++);
     2da:	e2 2f       	mov	r30, r18
     2dc:	f9 2f       	mov	r31, r25
     2de:	81 91       	ld	r24, Z+
     2e0:	80 93 c6 00 	sts	0x00C6, r24
     2e4:	f0 93 54 01 	sts	0x0154, r31
     2e8:	e0 93 53 01 	sts	0x0153, r30
}
     2ec:	08 95       	ret

000002ee <MODBUS_SetFuncTimerClear>:
//! Кол-во принятых транзакций с ошибкой CRC.
WORD modbus_ERROR_CRC_TRANSACTIONS = 0;

void MODBUS_SetFuncTimerClear(FuncTimerClear *func)
{
    funcTimerClear = func;
     2ee:	90 93 a4 01 	sts	0x01A4, r25
     2f2:	80 93 a3 01 	sts	0x01A3, r24
}
     2f6:	08 95       	ret

000002f8 <MODBUS_SetFuncTimerStart>:

void MODBUS_SetFuncTimerStart(FuncTimerStart *func)
{
    funcTimerStart = func;
     2f8:	90 93 a2 01 	sts	0x01A2, r25
     2fc:	80 93 a1 01 	sts	0x01A1, r24
}
     300:	08 95       	ret

00000302 <MODBUS_SetFuncTimerStop>:

void MODBUS_SetFuncTimerStop(FuncTimerStop *func)
{
    funcTimerStop = func;
     302:	90 93 97 01 	sts	0x0197, r25
     306:	80 93 96 01 	sts	0x0196, r24
}
     30a:	08 95       	ret

0000030c <MODBUS_SetFuncWriteReg>:

void MODBUS_SetFuncWriteReg(FuncWriteReg *func)
{
    funcWriteReg = func;
     30c:	90 93 9d 01 	sts	0x019D, r25
     310:	80 93 9c 01 	sts	0x019C, r24
}
     314:	08 95       	ret

00000316 <MODBUS_SetFuncReadRegs>:

void MODBUS_SetFuncReadRegs(FuncReadRegs *func)
{
    funcReadRegs = func;
     316:	90 93 99 01 	sts	0x0199, r25
     31a:	80 93 98 01 	sts	0x0198, r24
}
     31e:	08 95       	ret

00000320 <MODBUS_SetFuncWriteCoil>:

void MODBUS_SetFuncWriteCoil(FuncWriteCoil *func)
{
    funcWriteCoil = func;
     320:	90 93 a7 01 	sts	0x01A7, r25
     324:	80 93 a6 01 	sts	0x01A6, r24
}
     328:	08 95       	ret

0000032a <MODBUS_SetFuncReadCoils>:

void MODBUS_SetFuncReadCoils(FuncReadCoils *func)
{
    funcReadCoils = func;
     32a:	90 93 9b 01 	sts	0x019B, r25
     32e:	80 93 9a 01 	sts	0x019A, r24
}
     332:	08 95       	ret

00000334 <MODBUS_Init>:


void MODBUS_Init()
{
    funcTimerClear = 0;
     334:	10 92 a4 01 	sts	0x01A4, r1
     338:	10 92 a3 01 	sts	0x01A3, r1
    funcTimerStart = 0;
     33c:	10 92 a2 01 	sts	0x01A2, r1
     340:	10 92 a1 01 	sts	0x01A1, r1
    funcTimerStop  = 0;
     344:	10 92 97 01 	sts	0x0197, r1
     348:	10 92 96 01 	sts	0x0196, r1
    funcWriteReg   = 0;
     34c:	10 92 9d 01 	sts	0x019D, r1
     350:	10 92 9c 01 	sts	0x019C, r1
    funcWriteCoil  = 0;
     354:	10 92 a7 01 	sts	0x01A7, r1
     358:	10 92 a6 01 	sts	0x01A6, r1
    funcReadCoils  = 0;
     35c:	10 92 9b 01 	sts	0x019B, r1
     360:	10 92 9a 01 	sts	0x019A, r1

    modbus_index   = 0;
     364:	10 92 a5 01 	sts	0x01A5, r1
    //------------------------------------
            modbus_ADDR = 0;
     368:	10 92 9e 01 	sts	0x019E, r1
    //------------------------------------
    MODBUS_CLEAR_CRC16;
     36c:	8f ef       	ldi	r24, 0xFF	; 255
     36e:	9f ef       	ldi	r25, 0xFF	; 255
     370:	90 93 a0 01 	sts	0x01A0, r25
     374:	80 93 9f 01 	sts	0x019F, r24

    modbus_ReceiveEnable = 1;
     378:	81 e0       	ldi	r24, 0x01	; 1
     37a:	80 93 55 01 	sts	0x0155, r24
}
     37e:	08 95       	ret

00000380 <MODBUS_SetAddress>:

void MODBUS_SetAddress(BYTE addr)
{
  modbus_ADDR = addr;
     380:	80 93 9e 01 	sts	0x019E, r24
}
     384:	08 95       	ret

00000386 <modbus_Calculate_CRC16>:

void modbus_Calculate_CRC16(BYTE b)
{
    BYTE index;
    modbus_CRC16 ^= (WORD) b;
     386:	28 2f       	mov	r18, r24
     388:	30 e0       	ldi	r19, 0x00	; 0
     38a:	80 91 9f 01 	lds	r24, 0x019F
     38e:	90 91 a0 01 	lds	r25, 0x01A0
     392:	28 27       	eor	r18, r24
     394:	39 27       	eor	r19, r25
     396:	40 e0       	ldi	r20, 0x00	; 0
    for (index = 0; index < 8; index++)
     {
      if ((modbus_CRC16 & 0x01))   {
                           modbus_CRC16 = modbus_CRC16 >> 1;
                           modbus_CRC16 ^= (WORD) 0xA001;
     398:	61 e0       	ldi	r22, 0x01	; 1
     39a:	70 ea       	ldi	r23, 0xA0	; 160
     39c:	c9 01       	movw	r24, r18
     39e:	96 95       	lsr	r25
     3a0:	87 95       	ror	r24
{
    BYTE index;
    modbus_CRC16 ^= (WORD) b;
    for (index = 0; index < 8; index++)
     {
      if ((modbus_CRC16 & 0x01))   {
     3a2:	20 ff       	sbrs	r18, 0
     3a4:	04 c0       	rjmp	.+8      	; 0x3ae <modbus_Calculate_CRC16+0x28>
                           modbus_CRC16 = modbus_CRC16 >> 1;
                           modbus_CRC16 ^= (WORD) 0xA001;
     3a6:	9c 01       	movw	r18, r24
     3a8:	26 27       	eor	r18, r22
     3aa:	37 27       	eor	r19, r23
     3ac:	01 c0       	rjmp	.+2      	; 0x3b0 <modbus_Calculate_CRC16+0x2a>
                          }
      else { modbus_CRC16 = modbus_CRC16 >> 1; }
     3ae:	9c 01       	movw	r18, r24

void modbus_Calculate_CRC16(BYTE b)
{
    BYTE index;
    modbus_CRC16 ^= (WORD) b;
    for (index = 0; index < 8; index++)
     3b0:	4f 5f       	subi	r20, 0xFF	; 255
     3b2:	48 30       	cpi	r20, 0x08	; 8
     3b4:	99 f7       	brne	.-26     	; 0x39c <modbus_Calculate_CRC16+0x16>
     3b6:	30 93 a0 01 	sts	0x01A0, r19
     3ba:	20 93 9f 01 	sts	0x019F, r18
                           modbus_CRC16 = modbus_CRC16 >> 1;
                           modbus_CRC16 ^= (WORD) 0xA001;
                          }
      else { modbus_CRC16 = modbus_CRC16 >> 1; }
     }
}
     3be:	08 95       	ret

000003c0 <MODBUS_Receive>:

void MODBUS_Receive(BYTE b)
{
     3c0:	1f 93       	push	r17
     3c2:	18 2f       	mov	r17, r24
    if (funcTimerClear) funcTimerClear();
     3c4:	e0 91 a3 01 	lds	r30, 0x01A3
     3c8:	f0 91 a4 01 	lds	r31, 0x01A4
     3cc:	30 97       	sbiw	r30, 0x00	; 0
     3ce:	09 f0       	breq	.+2      	; 0x3d2 <MODBUS_Receive+0x12>
     3d0:	09 95       	icall

    if (modbus_ReceiveEnable)
     3d2:	80 91 55 01 	lds	r24, 0x0155
     3d6:	88 23       	and	r24, r24
     3d8:	11 f1       	breq	.+68     	; 0x41e <MODBUS_Receive+0x5e>
    {
        modbus_Calculate_CRC16(b);
     3da:	81 2f       	mov	r24, r17
     3dc:	d4 df       	rcall	.-88     	; 0x386 <modbus_Calculate_CRC16>

        //    UART_SendByteSynchronously(b);
        if (modbus_index < MODBUS_MAX_RECEIVE)
     3de:	80 91 a5 01 	lds	r24, 0x01A5
     3e2:	80 34       	cpi	r24, 0x40	; 64
     3e4:	e0 f4       	brcc	.+56     	; 0x41e <MODBUS_Receive+0x5e>
        {
            if (modbus_index == 0)
     3e6:	88 23       	and	r24, r24
     3e8:	81 f4       	brne	.+32     	; 0x40a <MODBUS_Receive+0x4a>
            {
                // Байт адреса.

                if (funcTimerStart) funcTimerStart();
     3ea:	e0 91 a1 01 	lds	r30, 0x01A1
     3ee:	f0 91 a2 01 	lds	r31, 0x01A2
     3f2:	30 97       	sbiw	r30, 0x00	; 0
     3f4:	09 f0       	breq	.+2      	; 0x3f8 <MODBUS_Receive+0x38>
     3f6:	09 95       	icall

                if (b != 0 && b != modbus_ADDR)
     3f8:	11 23       	and	r17, r17
     3fa:	39 f0       	breq	.+14     	; 0x40a <MODBUS_Receive+0x4a>
     3fc:	80 91 9e 01 	lds	r24, 0x019E
     400:	18 17       	cp	r17, r24
     402:	19 f0       	breq	.+6      	; 0x40a <MODBUS_Receive+0x4a>
                {
                    // Сообщение не по адресу. Отклоняем.
                    modbus_ReceiveEnable = 0;
     404:	10 92 55 01 	sts	0x0155, r1
     408:	0a c0       	rjmp	.+20     	; 0x41e <MODBUS_Receive+0x5e>
                    return;
                }
            }

            modbus_buffer[modbus_index++] = b;
     40a:	80 91 a5 01 	lds	r24, 0x01A5
     40e:	e8 2f       	mov	r30, r24
     410:	f0 e0       	ldi	r31, 0x00	; 0
     412:	ea 5a       	subi	r30, 0xAA	; 170
     414:	fe 4f       	sbci	r31, 0xFE	; 254
     416:	10 83       	st	Z, r17
     418:	8f 5f       	subi	r24, 0xFF	; 255
     41a:	80 93 a5 01 	sts	0x01A5, r24
        }
    }
}
     41e:	1f 91       	pop	r17
     420:	08 95       	ret

00000422 <MODBUS_EmulateReadRegister>:

void MODBUS_EmulateReadRegister()
{
    // Команда 3 устройству 1 на чтение 1 регистра из адреса 0.

    MODBUS_Receive(0x01);
     422:	81 e0       	ldi	r24, 0x01	; 1
     424:	cd df       	rcall	.-102    	; 0x3c0 <MODBUS_Receive>
    MODBUS_Receive(0x03);
     426:	83 e0       	ldi	r24, 0x03	; 3
     428:	cb df       	rcall	.-106    	; 0x3c0 <MODBUS_Receive>
    MODBUS_Receive(0x00);
     42a:	80 e0       	ldi	r24, 0x00	; 0
     42c:	c9 df       	rcall	.-110    	; 0x3c0 <MODBUS_Receive>
    MODBUS_Receive(0x00);
     42e:	80 e0       	ldi	r24, 0x00	; 0
     430:	c7 df       	rcall	.-114    	; 0x3c0 <MODBUS_Receive>
    MODBUS_Receive(0x00);
     432:	80 e0       	ldi	r24, 0x00	; 0
     434:	c5 df       	rcall	.-118    	; 0x3c0 <MODBUS_Receive>
    MODBUS_Receive(0x10);
     436:	80 e1       	ldi	r24, 0x10	; 16
     438:	c3 df       	rcall	.-122    	; 0x3c0 <MODBUS_Receive>
    MODBUS_Receive(0x44);
     43a:	84 e4       	ldi	r24, 0x44	; 68
     43c:	c1 df       	rcall	.-126    	; 0x3c0 <MODBUS_Receive>
    MODBUS_Receive(0x06);
     43e:	86 e0       	ldi	r24, 0x06	; 6
     440:	bf df       	rcall	.-130    	; 0x3c0 <MODBUS_Receive>
}
     442:	08 95       	ret

00000444 <MODBUS_SendEcho>:
    MODBUS_SendAnswer(1);
}

void MODBUS_SendEcho()
{
    UART_SendDataAsynchronously(modbus_buffer, modbus_index);
     444:	60 91 a5 01 	lds	r22, 0x01A5
     448:	86 e5       	ldi	r24, 0x56	; 86
     44a:	91 e0       	ldi	r25, 0x01	; 1
     44c:	70 e0       	ldi	r23, 0x00	; 0
     44e:	a5 de       	rcall	.-694    	; 0x19a <UART_SendDataAsynchronously>
}
     450:	08 95       	ret

00000452 <MODBUS_SendAnswer>:
        }
    }
}

void MODBUS_SendAnswer(WORD lenData)
{
     452:	ef 92       	push	r14
     454:	ff 92       	push	r15
     456:	0f 93       	push	r16
     458:	1f 93       	push	r17
     45a:	cf 93       	push	r28
     45c:	df 93       	push	r29
     45e:	bc 01       	movw	r22, r24
    // Для широковещательную посылку не отвечаем.
    if (modbus_buffer[0] == 0) return;
     460:	80 91 56 01 	lds	r24, 0x0156
     464:	88 23       	and	r24, r24
     466:	19 f1       	breq	.+70     	; 0x4ae <MODBUS_SendAnswer+0x5c>

    MODBUS_CLEAR_CRC16;
     468:	8f ef       	ldi	r24, 0xFF	; 255
     46a:	9f ef       	ldi	r25, 0xFF	; 255
     46c:	90 93 a0 01 	sts	0x01A0, r25
     470:	80 93 9f 01 	sts	0x019F, r24
    WORD i;
	lenData +=2; // +2 = addr + cmd
     474:	eb 01       	movw	r28, r22
     476:	22 96       	adiw	r28, 0x02	; 2
     478:	e6 e5       	ldi	r30, 0x56	; 86
     47a:	f1 e0       	ldi	r31, 0x01	; 1
    for (i = 0; i < lenData; i++)
     47c:	7f 01       	movw	r14, r30
     47e:	ec 0e       	add	r14, r28
     480:	fd 1e       	adc	r15, r29
     482:	03 c0       	rjmp	.+6      	; 0x48a <MODBUS_SendAnswer+0x38>
        modbus_Calculate_CRC16(modbus_buffer[i]);
     484:	80 81       	ld	r24, Z
     486:	7f df       	rcall	.-258    	; 0x386 <modbus_Calculate_CRC16>
     488:	f8 01       	movw	r30, r16
     48a:	8f 01       	movw	r16, r30
     48c:	0f 5f       	subi	r16, 0xFF	; 255
     48e:	1f 4f       	sbci	r17, 0xFF	; 255
    if (modbus_buffer[0] == 0) return;

    MODBUS_CLEAR_CRC16;
    WORD i;
	lenData +=2; // +2 = addr + cmd
    for (i = 0; i < lenData; i++)
     490:	ee 15       	cp	r30, r14
     492:	ff 05       	cpc	r31, r15
     494:	b9 f7       	brne	.-18     	; 0x484 <MODBUS_SendAnswer+0x32>
        modbus_Calculate_CRC16(modbus_buffer[i]);
    modbus_buffer[lenData]   = LOBYTE(modbus_CRC16);
     496:	80 91 9f 01 	lds	r24, 0x019F
     49a:	90 91 a0 01 	lds	r25, 0x01A0
     49e:	80 83       	st	Z, r24
    modbus_buffer[lenData+1] = HIBYTE(modbus_CRC16);
     4a0:	f8 01       	movw	r30, r16
     4a2:	90 83       	st	Z, r25
    /*
       Данные отсылаем в том-же буфере, что и принимаем, т.к.
       во время передачи по RS-485 приема данных не будет.
    */

    UART_SendDataAsynchronously(modbus_buffer, lenData + 2);
     4a4:	22 96       	adiw	r28, 0x02	; 2
     4a6:	86 e5       	ldi	r24, 0x56	; 86
     4a8:	91 e0       	ldi	r25, 0x01	; 1
     4aa:	be 01       	movw	r22, r28
     4ac:	76 de       	rcall	.-788    	; 0x19a <UART_SendDataAsynchronously>
}
     4ae:	df 91       	pop	r29
     4b0:	cf 91       	pop	r28
     4b2:	1f 91       	pop	r17
     4b4:	0f 91       	pop	r16
     4b6:	ff 90       	pop	r15
     4b8:	ef 90       	pop	r14
     4ba:	08 95       	ret

000004bc <MODBUS_SendException>:

void MODBUS_SendException(BYTE err)
{
     4bc:	98 2f       	mov	r25, r24
    // Для широковещательную посылку не отвечаем.
    if (modbus_buffer[0] == 0) return;
     4be:	80 91 56 01 	lds	r24, 0x0156
     4c2:	88 23       	and	r24, r24
     4c4:	51 f0       	breq	.+20     	; 0x4da <MODBUS_SendException+0x1e>
    modbus_buffer[1] |= 0x80;   // В команде выставляем бит ошибки.
     4c6:	80 91 57 01 	lds	r24, 0x0157
     4ca:	80 68       	ori	r24, 0x80	; 128
     4cc:	80 93 57 01 	sts	0x0157, r24
    modbus_buffer[2] = err;
     4d0:	90 93 58 01 	sts	0x0158, r25
    MODBUS_SendAnswer(1);
     4d4:	81 e0       	ldi	r24, 0x01	; 1
     4d6:	90 e0       	ldi	r25, 0x00	; 0
     4d8:	bc df       	rcall	.-136    	; 0x452 <MODBUS_SendAnswer>
     4da:	08 95       	ret

000004dc <MODBUS_Execute>:
{
    UART_SendDataAsynchronously(modbus_buffer, modbus_index);
}

void MODBUS_Execute()
{
     4dc:	9f 92       	push	r9
     4de:	af 92       	push	r10
     4e0:	bf 92       	push	r11
     4e2:	cf 92       	push	r12
     4e4:	df 92       	push	r13
     4e6:	ef 92       	push	r14
     4e8:	ff 92       	push	r15
     4ea:	0f 93       	push	r16
     4ec:	1f 93       	push	r17
     4ee:	cf 93       	push	r28
     4f0:	df 93       	push	r29
    if (funcTimerStop) funcTimerStop();
     4f2:	e0 91 96 01 	lds	r30, 0x0196
     4f6:	f0 91 97 01 	lds	r31, 0x0197
     4fa:	30 97       	sbiw	r30, 0x00	; 0
     4fc:	09 f0       	breq	.+2      	; 0x500 <__stack+0x1>
     4fe:	09 95       	icall

    modbus_ReceiveEnable = 0;
     500:	10 92 55 01 	sts	0x0155, r1
    if (modbus_CRC16)
     504:	80 91 9f 01 	lds	r24, 0x019F
     508:	90 91 a0 01 	lds	r25, 0x01A0
     50c:	89 2b       	or	r24, r25
     50e:	a9 f0       	breq	.+42     	; 0x53a <__stack+0x3b>
    {
        // Ошибка CRC.
        MODBUS_CLEAR_CRC16;
     510:	8f ef       	ldi	r24, 0xFF	; 255
     512:	9f ef       	ldi	r25, 0xFF	; 255
     514:	90 93 a0 01 	sts	0x01A0, r25
     518:	80 93 9f 01 	sts	0x019F, r24
        modbus_index = 0;
     51c:	10 92 a5 01 	sts	0x01A5, r1
        modbus_ReceiveEnable = 1;
     520:	81 e0       	ldi	r24, 0x01	; 1
     522:	80 93 55 01 	sts	0x0155, r24
        modbus_ERROR_CRC_TRANSACTIONS++;
     526:	80 91 2c 01 	lds	r24, 0x012C
     52a:	90 91 2d 01 	lds	r25, 0x012D
     52e:	01 96       	adiw	r24, 0x01	; 1
     530:	90 93 2d 01 	sts	0x012D, r25
     534:	80 93 2c 01 	sts	0x012C, r24
     538:	17 c1       	rjmp	.+558    	; 0x768 <__stack+0x269>
//        UART_SendTextAsynchronously("Error CRC\r\n");
        return;
    }

    modbus_TRANSACTIONS++;
     53a:	80 91 2a 01 	lds	r24, 0x012A
     53e:	90 91 2b 01 	lds	r25, 0x012B
     542:	01 96       	adiw	r24, 0x01	; 1
     544:	90 93 2b 01 	sts	0x012B, r25
     548:	80 93 2a 01 	sts	0x012A, r24
     54c:	8c e2       	ldi	r24, 0x2C	; 44
     54e:	91 e0       	ldi	r25, 0x01	; 1
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     550:	20 e7       	ldi	r18, 0x70	; 112
     552:	31 e0       	ldi	r19, 0x01	; 1
     554:	f9 01       	movw	r30, r18
     556:	31 97       	sbiw	r30, 0x01	; 1
     558:	f1 f7       	brne	.-4      	; 0x556 <__stack+0x57>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     55a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     55c:	d9 f7       	brne	.-10     	; 0x554 <__stack+0x55>

	// Ждем 30 млс.
 	_delay_ms(30);

//    WORD cmd = MAKEWORD(modbus_buffer[1], modbus_buffer[2]);
    BYTE cmd = modbus_buffer[1];
     55e:	90 91 57 01 	lds	r25, 0x0157

    WORD lenData = modbus_index - 4;    // Длина данных.
    BYTE *data = &(modbus_buffer[2]);

    if (lenData == 4 && cmd == MODBUS_cmd_WriteSingleRegister && funcWriteReg) {
     562:	80 91 a5 01 	lds	r24, 0x01A5
     566:	88 30       	cpi	r24, 0x08	; 8
     568:	09 f0       	breq	.+2      	; 0x56c <__stack+0x6d>
     56a:	ea c0       	rjmp	.+468    	; 0x740 <__stack+0x241>
     56c:	96 30       	cpi	r25, 0x06	; 6
     56e:	29 f4       	brne	.+10     	; 0x57a <__stack+0x7b>
     570:	e0 91 9c 01 	lds	r30, 0x019C
     574:	f0 91 9d 01 	lds	r31, 0x019D
     578:	54 c0       	rjmp	.+168    	; 0x622 <__stack+0x123>

        funcWriteReg(numReg, value);

        MODBUS_SendEcho();

    } else if (lenData == 4 && cmd == MODBUS_cmd_ReadHoldingRegisters && funcReadRegs) {
     57a:	93 30       	cpi	r25, 0x03	; 3
     57c:	09 f0       	breq	.+2      	; 0x580 <__stack+0x81>
     57e:	4b c0       	rjmp	.+150    	; 0x616 <__stack+0x117>
     580:	80 91 98 01 	lds	r24, 0x0198
     584:	90 91 99 01 	lds	r25, 0x0199
     588:	89 2b       	or	r24, r25
     58a:	09 f4       	brne	.+2      	; 0x58e <__stack+0x8f>
     58c:	d9 c0       	rjmp	.+434    	; 0x740 <__stack+0x241>

        WORD numReg = MAKEWORD(data[1], data[0]);
     58e:	00 91 59 01 	lds	r16, 0x0159
     592:	40 91 58 01 	lds	r20, 0x0158
        WORD cnt    = MAKEWORD(data[3], data[2]);
     596:	90 91 5a 01 	lds	r25, 0x015A
     59a:	80 e0       	ldi	r24, 0x00	; 0
     59c:	20 91 5b 01 	lds	r18, 0x015B
     5a0:	30 e0       	ldi	r19, 0x00	; 0
     5a2:	28 2b       	or	r18, r24
     5a4:	39 2b       	or	r19, r25
        WORD r = 0;
        WORD i;

        if (cnt >= 1 && cnt <= PERFORMER_MAX_REGS)
     5a6:	c9 01       	movw	r24, r18
     5a8:	01 97       	sbiw	r24, 0x01	; 1
     5aa:	40 97       	sbiw	r24, 0x10	; 16
     5ac:	08 f0       	brcs	.+2      	; 0x5b0 <__stack+0xb1>
     5ae:	c6 c0       	rjmp	.+396    	; 0x73c <__stack+0x23d>

        MODBUS_SendEcho();

    } else if (lenData == 4 && cmd == MODBUS_cmd_ReadHoldingRegisters && funcReadRegs) {

        WORD numReg = MAKEWORD(data[1], data[0]);
     5b0:	94 2f       	mov	r25, r20
     5b2:	80 e0       	ldi	r24, 0x00	; 0
     5b4:	40 2f       	mov	r20, r16
     5b6:	50 e0       	ldi	r21, 0x00	; 0
     5b8:	48 2b       	or	r20, r24
     5ba:	59 2b       	or	r21, r25
        WORD r = 0;
        WORD i;

        if (cnt >= 1 && cnt <= PERFORMER_MAX_REGS)
        {
            if (numReg + cnt <= PERFORMER_MAX_REGS)
     5bc:	c9 01       	movw	r24, r18
     5be:	84 0f       	add	r24, r20
     5c0:	95 1f       	adc	r25, r21
     5c2:	41 97       	sbiw	r24, 0x11	; 17
     5c4:	08 f0       	brcs	.+2      	; 0x5c8 <__stack+0xc9>
     5c6:	b8 c0       	rjmp	.+368    	; 0x738 <__stack+0x239>
            {
                if (numReg >= 0 && numReg < PERFORMER_MAX_REGS)
     5c8:	40 31       	cpi	r20, 0x10	; 16
     5ca:	51 05       	cpc	r21, r1
     5cc:	08 f0       	brcs	.+2      	; 0x5d0 <__stack+0xd1>
     5ce:	b2 c0       	rjmp	.+356    	; 0x734 <__stack+0x235>
                {

                    data[0] = (BYTE) cnt*2; // Кол-во байт.
     5d0:	82 2f       	mov	r24, r18
     5d2:	90 e0       	ldi	r25, 0x00	; 0
     5d4:	88 0f       	add	r24, r24
     5d6:	99 1f       	adc	r25, r25
     5d8:	80 93 58 01 	sts	0x0158, r24
     5dc:	c9 e5       	ldi	r28, 0x59	; 89
     5de:	d1 e0       	ldi	r29, 0x01	; 1
     5e0:	ee 24       	eor	r14, r14
     5e2:	ff 24       	eor	r15, r15
     5e4:	11 c0       	rjmp	.+34     	; 0x608 <__stack+0x109>
                    for (i = 0; i < data[0]; i += 2)
                    {
                            r = funcReadRegs(numReg++);
     5e6:	8a 01       	movw	r16, r20
     5e8:	0f 5f       	subi	r16, 0xFF	; 255
     5ea:	1f 4f       	sbci	r17, 0xFF	; 255
     5ec:	e0 91 98 01 	lds	r30, 0x0198
     5f0:	f0 91 99 01 	lds	r31, 0x0199
     5f4:	ca 01       	movw	r24, r20
     5f6:	09 95       	icall
                            data[i+1] = HIBYTE(r);
     5f8:	98 83       	st	Y, r25
                            data[i+2] = LOBYTE(r);
     5fa:	22 e0       	ldi	r18, 0x02	; 2
     5fc:	30 e0       	ldi	r19, 0x00	; 0
     5fe:	e2 0e       	add	r14, r18
     600:	f3 1e       	adc	r15, r19
     602:	89 83       	std	Y+1, r24	; 0x01
     604:	22 96       	adiw	r28, 0x02	; 2
     606:	a8 01       	movw	r20, r16
            {
                if (numReg >= 0 && numReg < PERFORMER_MAX_REGS)
                {

                    data[0] = (BYTE) cnt*2; // Кол-во байт.
                    for (i = 0; i < data[0]; i += 2)
     608:	80 91 58 01 	lds	r24, 0x0158
     60c:	90 e0       	ldi	r25, 0x00	; 0
     60e:	e8 16       	cp	r14, r24
     610:	f9 06       	cpc	r15, r25
     612:	48 f3       	brcs	.-46     	; 0x5e6 <__stack+0xe7>
     614:	a6 c0       	rjmp	.+332    	; 0x762 <__stack+0x263>
            } else MODBUS_SendException(0x02);
        } else  MODBUS_SendException(0x03);

        if (r == -1) MODBUS_SendAnswer(data[0] + 1);   // Если все хорошо, отправляем...

    } else if (lenData == 4 && cmd == MODBUS_cmd_WriteSingleCoil && funcWriteCoil) {
     616:	95 30       	cpi	r25, 0x05	; 5
     618:	f9 f4       	brne	.+62     	; 0x658 <__stack+0x159>
     61a:	e0 91 a6 01 	lds	r30, 0x01A6
     61e:	f0 91 a7 01 	lds	r31, 0x01A7
     622:	30 97       	sbiw	r30, 0x00	; 0
     624:	09 f4       	brne	.+2      	; 0x628 <__stack+0x129>
     626:	8c c0       	rjmp	.+280    	; 0x740 <__stack+0x241>
        WORD numReg = MAKEWORD(data[1], data[0]);
        WORD value  = MAKEWORD(data[3], data[2]);

        funcWriteCoil(numReg, value);
     628:	90 91 58 01 	lds	r25, 0x0158
     62c:	80 e0       	ldi	r24, 0x00	; 0
     62e:	40 91 59 01 	lds	r20, 0x0159
     632:	50 e0       	ldi	r21, 0x00	; 0
     634:	70 91 5a 01 	lds	r23, 0x015A
     638:	60 e0       	ldi	r22, 0x00	; 0
     63a:	20 91 5b 01 	lds	r18, 0x015B
     63e:	30 e0       	ldi	r19, 0x00	; 0
     640:	62 2b       	or	r22, r18
     642:	73 2b       	or	r23, r19
     644:	84 2b       	or	r24, r20
     646:	95 2b       	or	r25, r21
     648:	09 95       	icall
    MODBUS_SendAnswer(1);
}

void MODBUS_SendEcho()
{
    UART_SendDataAsynchronously(modbus_buffer, modbus_index);
     64a:	60 91 a5 01 	lds	r22, 0x01A5
     64e:	86 e5       	ldi	r24, 0x56	; 86
     650:	91 e0       	ldi	r25, 0x01	; 1
     652:	70 e0       	ldi	r23, 0x00	; 0
     654:	a2 dd       	rcall	.-1212   	; 0x19a <UART_SendDataAsynchronously>
     656:	76 c0       	rjmp	.+236    	; 0x744 <__stack+0x245>

        funcWriteCoil(numReg, value);

        MODBUS_SendEcho();

    } else if (lenData == 4 && cmd == MODBUS_cmd_ReadCoils && funcReadCoils) {
     658:	91 30       	cpi	r25, 0x01	; 1
     65a:	09 f0       	breq	.+2      	; 0x65e <__stack+0x15f>
     65c:	71 c0       	rjmp	.+226    	; 0x740 <__stack+0x241>
     65e:	80 91 9a 01 	lds	r24, 0x019A
     662:	90 91 9b 01 	lds	r25, 0x019B
     666:	89 2b       	or	r24, r25
     668:	09 f4       	brne	.+2      	; 0x66c <__stack+0x16d>
     66a:	6a c0       	rjmp	.+212    	; 0x740 <__stack+0x241>

        WORD numReg = MAKEWORD(data[1], data[0]);
     66c:	40 91 59 01 	lds	r20, 0x0159
     670:	30 91 58 01 	lds	r19, 0x0158
        WORD cnt    = MAKEWORD(data[3], data[2]);
     674:	90 91 5a 01 	lds	r25, 0x015A
     678:	80 e0       	ldi	r24, 0x00	; 0
     67a:	20 91 5b 01 	lds	r18, 0x015B
     67e:	e2 2e       	mov	r14, r18
     680:	ff 24       	eor	r15, r15
     682:	e8 2a       	or	r14, r24
     684:	f9 2a       	or	r15, r25
        WORD r = 1;
        WORD i;
        BYTE i2;
        if (cnt >= 1 && cnt <= PERFORMER_MAX_COILS)
     686:	c7 01       	movw	r24, r14
     688:	01 97       	sbiw	r24, 0x01	; 1
     68a:	08 97       	sbiw	r24, 0x08	; 8
     68c:	08 f0       	brcs	.+2      	; 0x690 <__stack+0x191>
     68e:	56 c0       	rjmp	.+172    	; 0x73c <__stack+0x23d>

        MODBUS_SendEcho();

    } else if (lenData == 4 && cmd == MODBUS_cmd_ReadCoils && funcReadCoils) {

        WORD numReg = MAKEWORD(data[1], data[0]);
     690:	93 2f       	mov	r25, r19
     692:	80 e0       	ldi	r24, 0x00	; 0
     694:	a4 2e       	mov	r10, r20
     696:	bb 24       	eor	r11, r11
     698:	a8 2a       	or	r10, r24
     69a:	b9 2a       	or	r11, r25
        WORD r = 1;
        WORD i;
        BYTE i2;
        if (cnt >= 1 && cnt <= PERFORMER_MAX_COILS)
        {
            if (numReg + cnt <= PERFORMER_MAX_COILS)
     69c:	c7 01       	movw	r24, r14
     69e:	8a 0d       	add	r24, r10
     6a0:	9b 1d       	adc	r25, r11
     6a2:	09 97       	sbiw	r24, 0x09	; 9
     6a4:	08 f0       	brcs	.+2      	; 0x6a8 <__stack+0x1a9>
     6a6:	48 c0       	rjmp	.+144    	; 0x738 <__stack+0x239>
            {
                if (numReg >= 0 && numReg < PERFORMER_MAX_COILS)
     6a8:	38 e0       	ldi	r19, 0x08	; 8
     6aa:	a3 16       	cp	r10, r19
     6ac:	b1 04       	cpc	r11, r1
     6ae:	08 f0       	brcs	.+2      	; 0x6b2 <__stack+0x1b3>
     6b0:	41 c0       	rjmp	.+130    	; 0x734 <__stack+0x235>
                {
                    // До 8 включительно значений катушек помещается в 1 байт. Считаем кол-во байт.
                    data[0] = (BYTE) (cnt/8);
     6b2:	c7 01       	movw	r24, r14
     6b4:	53 e0       	ldi	r21, 0x03	; 3
     6b6:	96 95       	lsr	r25
     6b8:	87 95       	ror	r24
     6ba:	5a 95       	dec	r21
     6bc:	e1 f7       	brne	.-8      	; 0x6b6 <__stack+0x1b7>
     6be:	28 2f       	mov	r18, r24
     6c0:	80 93 58 01 	sts	0x0158, r24
					if (cnt%8) (data[0])++;
     6c4:	c7 01       	movw	r24, r14
     6c6:	87 70       	andi	r24, 0x07	; 7
     6c8:	90 70       	andi	r25, 0x00	; 0
     6ca:	89 2b       	or	r24, r25
     6cc:	19 f0       	breq	.+6      	; 0x6d4 <__stack+0x1d5>
     6ce:	2f 5f       	subi	r18, 0xFF	; 255
     6d0:	20 93 58 01 	sts	0x0158, r18
                    i2 = 0;
					data[r] = 0;
     6d4:	10 92 59 01 	sts	0x0159, r1
     6d8:	41 e0       	ldi	r20, 0x01	; 1
     6da:	c4 2e       	mov	r12, r20
     6dc:	d1 2c       	mov	r13, r1
     6de:	00 e0       	ldi	r16, 0x00	; 0
     6e0:	10 e0       	ldi	r17, 0x00	; 0
     6e2:	99 24       	eor	r9, r9
     6e4:	23 c0       	rjmp	.+70     	; 0x72c <__stack+0x22d>
                    for (i = 0; i < cnt; i++)
                    {
                        data[r] = data[r] << 1;
     6e6:	e6 01       	movw	r28, r12
     6e8:	c8 5a       	subi	r28, 0xA8	; 168
     6ea:	de 4f       	sbci	r29, 0xFE	; 254
     6ec:	88 81       	ld	r24, Y
     6ee:	88 0f       	add	r24, r24
     6f0:	88 83       	st	Y, r24
                        if (funcReadCoils(numReg + i) == MODBUS_COIL_ON) data[r] |= 1;
     6f2:	e0 91 9a 01 	lds	r30, 0x019A
     6f6:	f0 91 9b 01 	lds	r31, 0x019B
     6fa:	c8 01       	movw	r24, r16
     6fc:	8a 0d       	add	r24, r10
     6fe:	9b 1d       	adc	r25, r11
     700:	09 95       	icall
     702:	80 50       	subi	r24, 0x00	; 0
     704:	9f 4f       	sbci	r25, 0xFF	; 255
     706:	19 f4       	brne	.+6      	; 0x70e <__stack+0x20f>
     708:	88 81       	ld	r24, Y
     70a:	81 60       	ori	r24, 0x01	; 1
     70c:	88 83       	st	Y, r24
                        if (i2++ == 7) {i2 = 0; data[++r] = 0x00;}
     70e:	37 e0       	ldi	r19, 0x07	; 7
     710:	93 16       	cp	r9, r19
     712:	11 f0       	breq	.+4      	; 0x718 <__stack+0x219>
     714:	93 94       	inc	r9
     716:	08 c0       	rjmp	.+16     	; 0x728 <__stack+0x229>
     718:	08 94       	sec
     71a:	c1 1c       	adc	r12, r1
     71c:	d1 1c       	adc	r13, r1
     71e:	f6 01       	movw	r30, r12
     720:	e8 5a       	subi	r30, 0xA8	; 168
     722:	fe 4f       	sbci	r31, 0xFE	; 254
     724:	10 82       	st	Z, r1
     726:	99 24       	eor	r9, r9
                    // До 8 включительно значений катушек помещается в 1 байт. Считаем кол-во байт.
                    data[0] = (BYTE) (cnt/8);
					if (cnt%8) (data[0])++;
                    i2 = 0;
					data[r] = 0;
                    for (i = 0; i < cnt; i++)
     728:	0f 5f       	subi	r16, 0xFF	; 255
     72a:	1f 4f       	sbci	r17, 0xFF	; 255
     72c:	0e 15       	cp	r16, r14
     72e:	1f 05       	cpc	r17, r15
     730:	d0 f2       	brcs	.-76     	; 0x6e6 <__stack+0x1e7>
     732:	14 c0       	rjmp	.+40     	; 0x75c <__stack+0x25d>
                        data[r] = data[r] << 1;
                        if (funcReadCoils(numReg + i) == MODBUS_COIL_ON) data[r] |= 1;
                        if (i2++ == 7) {i2 = 0; data[++r] = 0x00;}
                    }
                    r = -1; // Флаг, что все прошло хорошо.
                } else MODBUS_SendException(0x04);
     734:	84 e0       	ldi	r24, 0x04	; 4
     736:	05 c0       	rjmp	.+10     	; 0x742 <__stack+0x243>
            } else MODBUS_SendException(0x02);
     738:	82 e0       	ldi	r24, 0x02	; 2
     73a:	03 c0       	rjmp	.+6      	; 0x742 <__stack+0x243>
        } else  MODBUS_SendException(0x03);
     73c:	83 e0       	ldi	r24, 0x03	; 3
     73e:	01 c0       	rjmp	.+2      	; 0x742 <__stack+0x243>

        if (r == -1) MODBUS_SendAnswer(data[0] + 1);   // Если все хорошо, отправляем...

    } else MODBUS_SendException(0x01);      // Функция не поддерживается.
     740:	81 e0       	ldi	r24, 0x01	; 1
     742:	bc de       	rcall	.-648    	; 0x4bc <MODBUS_SendException>

    MODBUS_CLEAR_CRC16;
     744:	8f ef       	ldi	r24, 0xFF	; 255
     746:	9f ef       	ldi	r25, 0xFF	; 255
     748:	90 93 a0 01 	sts	0x01A0, r25
     74c:	80 93 9f 01 	sts	0x019F, r24
    modbus_index = 0;
     750:	10 92 a5 01 	sts	0x01A5, r1
    modbus_ReceiveEnable = 1;
     754:	81 e0       	ldi	r24, 0x01	; 1
     756:	80 93 55 01 	sts	0x0155, r24
     75a:	06 c0       	rjmp	.+12     	; 0x768 <__stack+0x269>
                    r = -1; // Флаг, что все прошло хорошо.
                } else MODBUS_SendException(0x04);
            } else MODBUS_SendException(0x02);
        } else  MODBUS_SendException(0x03);

        if (r == -1) MODBUS_SendAnswer(data[0] + 1);   // Если все хорошо, отправляем...
     75c:	80 91 58 01 	lds	r24, 0x0158
     760:	90 e0       	ldi	r25, 0x00	; 0
     762:	01 96       	adiw	r24, 0x01	; 1
     764:	76 de       	rcall	.-788    	; 0x452 <MODBUS_SendAnswer>
     766:	ee cf       	rjmp	.-36     	; 0x744 <__stack+0x245>
    } else MODBUS_SendException(0x01);      // Функция не поддерживается.

    MODBUS_CLEAR_CRC16;
    modbus_index = 0;
    modbus_ReceiveEnable = 1;
}
     768:	df 91       	pop	r29
     76a:	cf 91       	pop	r28
     76c:	1f 91       	pop	r17
     76e:	0f 91       	pop	r16
     770:	ff 90       	pop	r15
     772:	ef 90       	pop	r14
     774:	df 90       	pop	r13
     776:	cf 90       	pop	r12
     778:	bf 90       	pop	r11
     77a:	af 90       	pop	r10
     77c:	9f 90       	pop	r9
     77e:	08 95       	ret

00000780 <T0_SetFuncOverflow>:

volatile BYTE T1_100mls;

void T0_SetFuncOverflow(FuncTimerOverflow *func)
{
    funcOverflowT0 = func;
     780:	90 93 ae 01 	sts	0x01AE, r25
     784:	80 93 ad 01 	sts	0x01AD, r24
}
     788:	08 95       	ret

0000078a <T1_SetFuncOverflow>:

void T1_SetFuncOverflow(FuncTimerOverflow *func)
{
    funcOverflowT1 = func;
     78a:	90 93 aa 01 	sts	0x01AA, r25
     78e:	80 93 a9 01 	sts	0x01A9, r24
}
     792:	08 95       	ret

00000794 <T2_SetFuncOverflow>:

void T2_SetFuncOverflow(FuncTimerOverflow *func)
{
    funcOverflowT2 = func;
     794:	90 93 ac 01 	sts	0x01AC, r25
     798:	80 93 ab 01 	sts	0x01AB, r24
}
     79c:	08 95       	ret

0000079e <T0_Init>:


void T0_Init()
{
    funcOverflowT0 = 0;
     79e:	10 92 ae 01 	sts	0x01AE, r1
     7a2:	10 92 ad 01 	sts	0x01AD, r1
    TCCR0A = 0x00;
     7a6:	14 bc       	out	0x24, r1	; 36
    TCCR0B = 0x00;
     7a8:	15 bc       	out	0x25, r1	; 37
    TIMSK0 |= (1 << TOIE0);
     7aa:	ee e6       	ldi	r30, 0x6E	; 110
     7ac:	f0 e0       	ldi	r31, 0x00	; 0
     7ae:	80 81       	ld	r24, Z
     7b0:	81 60       	ori	r24, 0x01	; 1
     7b2:	80 83       	st	Z, r24
}
     7b4:	08 95       	ret

000007b6 <T1_Init>:

void T1_Init()
{
    funcOverflowT1 = 0;
     7b6:	10 92 aa 01 	sts	0x01AA, r1
     7ba:	10 92 a9 01 	sts	0x01A9, r1
    TCCR1A = 0x00;
     7be:	10 92 80 00 	sts	0x0080, r1
    TCCR1B = 0x00;
     7c2:	10 92 81 00 	sts	0x0081, r1

    // 1_clk = 64/F_CPU
    // clk = 0.1 sek / (1_clk) = 0x5A00
    OCR1A = 0x5A00;
     7c6:	80 e0       	ldi	r24, 0x00	; 0
     7c8:	9a e5       	ldi	r25, 0x5A	; 90
     7ca:	90 93 89 00 	sts	0x0089, r25
     7ce:	80 93 88 00 	sts	0x0088, r24
    TIMSK1 |= (1 << OCIE1A);
     7d2:	ef e6       	ldi	r30, 0x6F	; 111
     7d4:	f0 e0       	ldi	r31, 0x00	; 0
     7d6:	80 81       	ld	r24, Z
     7d8:	82 60       	ori	r24, 0x02	; 2
     7da:	80 83       	st	Z, r24

    //    TIMSK1 |= (1 << TOIE1);
}
     7dc:	08 95       	ret

000007de <T2_Init>:

void T2_Init()
{
    funcOverflowT2 = 0;
     7de:	10 92 ac 01 	sts	0x01AC, r1
     7e2:	10 92 ab 01 	sts	0x01AB, r1
    TCCR2A = 0x00;
     7e6:	10 92 b0 00 	sts	0x00B0, r1
    TCCR2B = 0x00;
     7ea:	10 92 b1 00 	sts	0x00B1, r1
    TIMSK2 |= (1 << TOIE2);
     7ee:	e0 e7       	ldi	r30, 0x70	; 112
     7f0:	f0 e0       	ldi	r31, 0x00	; 0
     7f2:	80 81       	ld	r24, Z
     7f4:	81 60       	ori	r24, 0x01	; 1
     7f6:	80 83       	st	Z, r24
}
     7f8:	08 95       	ret

000007fa <T0_Start>:

void T0_Start() { T0_START; }
     7fa:	84 e0       	ldi	r24, 0x04	; 4
     7fc:	85 bd       	out	0x25, r24	; 37
     7fe:	08 95       	ret

00000800 <T0_Stop>:
void T0_Stop()  { T0_STOP;  }
     800:	15 bc       	out	0x25, r1	; 37
     802:	08 95       	ret

00000804 <T0_Clear>:
void T0_Clear() { T0_CLEAR; }
     804:	16 bc       	out	0x26, r1	; 38
     806:	08 95       	ret

00000808 <T1_Start>:

void T1_Start() { T1_START; }
     808:	8b e0       	ldi	r24, 0x0B	; 11
     80a:	80 93 81 00 	sts	0x0081, r24
     80e:	08 95       	ret

00000810 <T1_Stop>:
void T1_Stop()  { T1_STOP;  }
     810:	10 92 81 00 	sts	0x0081, r1
     814:	08 95       	ret

00000816 <T1_Clear>:
void T1_Clear() { T1_CLEAR; }
     816:	10 92 85 00 	sts	0x0085, r1
     81a:	10 92 84 00 	sts	0x0084, r1
     81e:	08 95       	ret

00000820 <T2_Start>:

void T2_Start() { T2_START; }
     820:	87 e0       	ldi	r24, 0x07	; 7
     822:	80 93 b1 00 	sts	0x00B1, r24
     826:	08 95       	ret

00000828 <T2_Stop>:
void T2_Stop()  { T2_STOP;  }
     828:	10 92 b1 00 	sts	0x00B1, r1
     82c:	08 95       	ret

0000082e <T2_Clear>:
void T2_Clear() { T2_CLEAR; }
     82e:	10 92 b2 00 	sts	0x00B2, r1
     832:	08 95       	ret

00000834 <__vector_16>:



//! Прерывание. Переполнение таймера 0.
ISR(TIMER0_OVF_vect)
{
     834:	1f 92       	push	r1
     836:	0f 92       	push	r0
     838:	0f b6       	in	r0, 0x3f	; 63
     83a:	0f 92       	push	r0
     83c:	11 24       	eor	r1, r1
     83e:	2f 93       	push	r18
     840:	3f 93       	push	r19
     842:	4f 93       	push	r20
     844:	5f 93       	push	r21
     846:	6f 93       	push	r22
     848:	7f 93       	push	r23
     84a:	8f 93       	push	r24
     84c:	9f 93       	push	r25
     84e:	af 93       	push	r26
     850:	bf 93       	push	r27
     852:	ef 93       	push	r30
     854:	ff 93       	push	r31
    if (funcOverflowT0) funcOverflowT0();
     856:	e0 91 ad 01 	lds	r30, 0x01AD
     85a:	f0 91 ae 01 	lds	r31, 0x01AE
     85e:	30 97       	sbiw	r30, 0x00	; 0
     860:	09 f0       	breq	.+2      	; 0x864 <__vector_16+0x30>
     862:	09 95       	icall
}
     864:	ff 91       	pop	r31
     866:	ef 91       	pop	r30
     868:	bf 91       	pop	r27
     86a:	af 91       	pop	r26
     86c:	9f 91       	pop	r25
     86e:	8f 91       	pop	r24
     870:	7f 91       	pop	r23
     872:	6f 91       	pop	r22
     874:	5f 91       	pop	r21
     876:	4f 91       	pop	r20
     878:	3f 91       	pop	r19
     87a:	2f 91       	pop	r18
     87c:	0f 90       	pop	r0
     87e:	0f be       	out	0x3f, r0	; 63
     880:	0f 90       	pop	r0
     882:	1f 90       	pop	r1
     884:	18 95       	reti

00000886 <__vector_13>:

//! Прерывание. Переполнение таймера 1.
ISR(TIMER1_OVF_vect)
{
     886:	1f 92       	push	r1
     888:	0f 92       	push	r0
     88a:	0f b6       	in	r0, 0x3f	; 63
     88c:	0f 92       	push	r0
     88e:	11 24       	eor	r1, r1
     890:	2f 93       	push	r18
     892:	3f 93       	push	r19
     894:	4f 93       	push	r20
     896:	5f 93       	push	r21
     898:	6f 93       	push	r22
     89a:	7f 93       	push	r23
     89c:	8f 93       	push	r24
     89e:	9f 93       	push	r25
     8a0:	af 93       	push	r26
     8a2:	bf 93       	push	r27
     8a4:	ef 93       	push	r30
     8a6:	ff 93       	push	r31
    if (funcOverflowT1) funcOverflowT1();
     8a8:	e0 91 a9 01 	lds	r30, 0x01A9
     8ac:	f0 91 aa 01 	lds	r31, 0x01AA
     8b0:	30 97       	sbiw	r30, 0x00	; 0
     8b2:	09 f0       	breq	.+2      	; 0x8b6 <__vector_13+0x30>
     8b4:	09 95       	icall
}
     8b6:	ff 91       	pop	r31
     8b8:	ef 91       	pop	r30
     8ba:	bf 91       	pop	r27
     8bc:	af 91       	pop	r26
     8be:	9f 91       	pop	r25
     8c0:	8f 91       	pop	r24
     8c2:	7f 91       	pop	r23
     8c4:	6f 91       	pop	r22
     8c6:	5f 91       	pop	r21
     8c8:	4f 91       	pop	r20
     8ca:	3f 91       	pop	r19
     8cc:	2f 91       	pop	r18
     8ce:	0f 90       	pop	r0
     8d0:	0f be       	out	0x3f, r0	; 63
     8d2:	0f 90       	pop	r0
     8d4:	1f 90       	pop	r1
     8d6:	18 95       	reti

000008d8 <__vector_9>:

//! Прерывание. Переполнение таймера 2.
ISR(TIMER2_OVF_vect)
{
     8d8:	1f 92       	push	r1
     8da:	0f 92       	push	r0
     8dc:	0f b6       	in	r0, 0x3f	; 63
     8de:	0f 92       	push	r0
     8e0:	11 24       	eor	r1, r1
     8e2:	2f 93       	push	r18
     8e4:	3f 93       	push	r19
     8e6:	4f 93       	push	r20
     8e8:	5f 93       	push	r21
     8ea:	6f 93       	push	r22
     8ec:	7f 93       	push	r23
     8ee:	8f 93       	push	r24
     8f0:	9f 93       	push	r25
     8f2:	af 93       	push	r26
     8f4:	bf 93       	push	r27
     8f6:	ef 93       	push	r30
     8f8:	ff 93       	push	r31
    if (funcOverflowT2) funcOverflowT2();
     8fa:	e0 91 ab 01 	lds	r30, 0x01AB
     8fe:	f0 91 ac 01 	lds	r31, 0x01AC
     902:	30 97       	sbiw	r30, 0x00	; 0
     904:	09 f0       	breq	.+2      	; 0x908 <__vector_9+0x30>
     906:	09 95       	icall
}
     908:	ff 91       	pop	r31
     90a:	ef 91       	pop	r30
     90c:	bf 91       	pop	r27
     90e:	af 91       	pop	r26
     910:	9f 91       	pop	r25
     912:	8f 91       	pop	r24
     914:	7f 91       	pop	r23
     916:	6f 91       	pop	r22
     918:	5f 91       	pop	r21
     91a:	4f 91       	pop	r20
     91c:	3f 91       	pop	r19
     91e:	2f 91       	pop	r18
     920:	0f 90       	pop	r0
     922:	0f be       	out	0x3f, r0	; 63
     924:	0f 90       	pop	r0
     926:	1f 90       	pop	r1
     928:	18 95       	reti

0000092a <__vector_11>:

//! Прерывание. Таймер 1 достиг значение OCR1A
ISR(TIMER1_COMPA_vect)
{
     92a:	1f 92       	push	r1
     92c:	0f 92       	push	r0
     92e:	0f b6       	in	r0, 0x3f	; 63
     930:	0f 92       	push	r0
     932:	11 24       	eor	r1, r1
     934:	2f 93       	push	r18
     936:	3f 93       	push	r19
     938:	4f 93       	push	r20
     93a:	5f 93       	push	r21
     93c:	6f 93       	push	r22
     93e:	7f 93       	push	r23
     940:	8f 93       	push	r24
     942:	9f 93       	push	r25
     944:	af 93       	push	r26
     946:	bf 93       	push	r27
     948:	ef 93       	push	r30
     94a:	ff 93       	push	r31
    T1_100mls++;
     94c:	80 91 a8 01 	lds	r24, 0x01A8
     950:	8f 5f       	subi	r24, 0xFF	; 255
     952:	80 93 a8 01 	sts	0x01A8, r24
	if (funcOverflowT1) funcOverflowT1();
     956:	e0 91 a9 01 	lds	r30, 0x01A9
     95a:	f0 91 aa 01 	lds	r31, 0x01AA
     95e:	30 97       	sbiw	r30, 0x00	; 0
     960:	09 f0       	breq	.+2      	; 0x964 <__vector_11+0x3a>
     962:	09 95       	icall
}
     964:	ff 91       	pop	r31
     966:	ef 91       	pop	r30
     968:	bf 91       	pop	r27
     96a:	af 91       	pop	r26
     96c:	9f 91       	pop	r25
     96e:	8f 91       	pop	r24
     970:	7f 91       	pop	r23
     972:	6f 91       	pop	r22
     974:	5f 91       	pop	r21
     976:	4f 91       	pop	r20
     978:	3f 91       	pop	r19
     97a:	2f 91       	pop	r18
     97c:	0f 90       	pop	r0
     97e:	0f be       	out	0x3f, r0	; 63
     980:	0f 90       	pop	r0
     982:	1f 90       	pop	r1
     984:	18 95       	reti

00000986 <PERFORMER_Init>:
//! Рабочие значения катушек.
WORD PERFORMER_Coils[PERFORMER_MAX_COILS];

void PERFORMER_Init()
{
    PERFORMER_Regs[7] &= ~(3 << 8); PERFORMER_Regs[7] |= (2 << 8);
     986:	80 91 bd 01 	lds	r24, 0x01BD
     98a:	90 91 be 01 	lds	r25, 0x01BE
     98e:	9c 7f       	andi	r25, 0xFC	; 252
     990:	92 60       	ori	r25, 0x02	; 2
     992:	90 93 be 01 	sts	0x01BE, r25
     996:	80 93 bd 01 	sts	0x01BD, r24
     99a:	10 92 b0 01 	sts	0x01B0, r1
     99e:	10 92 af 01 	sts	0x01AF, r1

    BYTE t;
    for (t = 0; t < PERFORMER_MAX_REGS; t++) PERFORMER_Regs[0] = 0;
}
     9a2:	08 95       	ret

000009a4 <PERFORMER_ReadRegister>:

WORD PERFORMER_ReadRegister(WORD addr)
{
     9a4:	fc 01       	movw	r30, r24
    if (addr >= PERFORMER_MAX_REGS) return 0;
     9a6:	80 31       	cpi	r24, 0x10	; 16
     9a8:	91 05       	cpc	r25, r1
     9aa:	18 f0       	brcs	.+6      	; 0x9b2 <PERFORMER_ReadRegister+0xe>
     9ac:	20 e0       	ldi	r18, 0x00	; 0
     9ae:	30 e0       	ldi	r19, 0x00	; 0
     9b0:	06 c0       	rjmp	.+12     	; 0x9be <PERFORMER_ReadRegister+0x1a>
    return PERFORMER_Regs[addr];
     9b2:	ee 0f       	add	r30, r30
     9b4:	ff 1f       	adc	r31, r31
     9b6:	e1 55       	subi	r30, 0x51	; 81
     9b8:	fe 4f       	sbci	r31, 0xFE	; 254
     9ba:	20 81       	ld	r18, Z
     9bc:	31 81       	ldd	r19, Z+1	; 0x01
}
     9be:	c9 01       	movw	r24, r18
     9c0:	08 95       	ret

000009c2 <PERFORMER_WriteRegister>:

void PERFORMER_WriteRegister(WORD addr, WORD reg)
{
     9c2:	fc 01       	movw	r30, r24
    if (addr < PERFORMER_MAX_REGS)  PERFORMER_Regs[addr] = reg;
     9c4:	80 31       	cpi	r24, 0x10	; 16
     9c6:	91 05       	cpc	r25, r1
     9c8:	30 f4       	brcc	.+12     	; 0x9d6 <PERFORMER_WriteRegister+0x14>
     9ca:	ee 0f       	add	r30, r30
     9cc:	ff 1f       	adc	r31, r31
     9ce:	e1 55       	subi	r30, 0x51	; 81
     9d0:	fe 4f       	sbci	r31, 0xFE	; 254
     9d2:	71 83       	std	Z+1, r23	; 0x01
     9d4:	60 83       	st	Z, r22
     9d6:	08 95       	ret

000009d8 <PERFORMER_ReadCoils>:
}

WORD PERFORMER_ReadCoils(WORD addr)
{
     9d8:	fc 01       	movw	r30, r24
    if (addr >= PERFORMER_MAX_COILS) return MODBUS_COIL_ERROR;
     9da:	88 30       	cpi	r24, 0x08	; 8
     9dc:	91 05       	cpc	r25, r1
     9de:	18 f0       	brcs	.+6      	; 0x9e6 <PERFORMER_ReadCoils+0xe>
     9e0:	2f ef       	ldi	r18, 0xFF	; 255
     9e2:	30 e0       	ldi	r19, 0x00	; 0
     9e4:	06 c0       	rjmp	.+12     	; 0x9f2 <PERFORMER_ReadCoils+0x1a>
    return PERFORMER_Coils[addr];
     9e6:	ee 0f       	add	r30, r30
     9e8:	ff 1f       	adc	r31, r31
     9ea:	e1 53       	subi	r30, 0x31	; 49
     9ec:	fe 4f       	sbci	r31, 0xFE	; 254
     9ee:	20 81       	ld	r18, Z
     9f0:	31 81       	ldd	r19, Z+1	; 0x01
}
     9f2:	c9 01       	movw	r24, r18
     9f4:	08 95       	ret

000009f6 <PERFORMER_Execute>:
    }

}

void PERFORMER_Execute()
{
     9f6:	1f 93       	push	r17
//    WORD *pw;
    WORD w;
    w = 0;
    if (IS_IN1) w |= (1 << 0);
     9f8:	89 b1       	in	r24, 0x09	; 9
     9fa:	90 e0       	ldi	r25, 0x00	; 0
     9fc:	96 95       	lsr	r25
     9fe:	87 95       	ror	r24
     a00:	96 95       	lsr	r25
     a02:	87 95       	ror	r24
     a04:	81 70       	andi	r24, 0x01	; 1
     a06:	90 70       	andi	r25, 0x00	; 0
    if (IS_IN2) w |= (1 << 1);
     a08:	33 99       	sbic	0x06, 3	; 6
     a0a:	82 60       	ori	r24, 0x02	; 2
    if (IS_IN3) w |= (1 << 2);
     a0c:	4b 99       	sbic	0x09, 3	; 9
     a0e:	84 60       	ori	r24, 0x04	; 4
    if (IS_IN4) w |= (1 << 3);
     a10:	4c 99       	sbic	0x09, 4	; 9
     a12:	88 60       	ori	r24, 0x08	; 8
    if (IS_IN5) w |= (1 << 4);
     a14:	4e 99       	sbic	0x09, 6	; 9
     a16:	80 61       	ori	r24, 0x10	; 16
    if (IS_IN6) w |= (1 << 5);
     a18:	4d 99       	sbic	0x09, 5	; 9
     a1a:	80 62       	ori	r24, 0x20	; 32

    PERFORMER_Regs[0] = w;
     a1c:	90 93 b0 01 	sts	0x01B0, r25
     a20:	80 93 af 01 	sts	0x01AF, r24

    PERFORMER_Regs[2] = DS18B20_GetTemparature(0);   // Температура 1
     a24:	80 e0       	ldi	r24, 0x00	; 0
     a26:	29 d3       	rcall	.+1618   	; 0x107a <DS18B20_GetTemparature>
     a28:	90 93 b4 01 	sts	0x01B4, r25
     a2c:	80 93 b3 01 	sts	0x01B3, r24
    PERFORMER_Regs[3] = DS18B20_GetTemparature(1);   // Температура 2
     a30:	81 e0       	ldi	r24, 0x01	; 1
     a32:	23 d3       	rcall	.+1606   	; 0x107a <DS18B20_GetTemparature>
     a34:	90 93 b6 01 	sts	0x01B6, r25
     a38:	80 93 b5 01 	sts	0x01B5, r24
    PERFORMER_Regs[4] = ADC_GetValue(6);             // АЦП 1
     a3c:	86 e0       	ldi	r24, 0x06	; 6
     a3e:	7f d0       	rcall	.+254    	; 0xb3e <ADC_GetValue>
     a40:	90 93 b8 01 	sts	0x01B8, r25
     a44:	80 93 b7 01 	sts	0x01B7, r24
    PERFORMER_Regs[5] = ADC_GetValue(7);             // АЦП 2
     a48:	87 e0       	ldi	r24, 0x07	; 7
     a4a:	79 d0       	rcall	.+242    	; 0xb3e <ADC_GetValue>
     a4c:	90 93 ba 01 	sts	0x01BA, r25
     a50:	80 93 b9 01 	sts	0x01B9, r24


    // Опции нагрузки.
    w = PERFORMER_Regs[7];
     a54:	10 91 bd 01 	lds	r17, 0x01BD
    LOAD_1_SetDirection(w & (1 << 4));
     a58:	81 2f       	mov	r24, r17
     a5a:	80 71       	andi	r24, 0x10	; 16
     a5c:	b9 d3       	rcall	.+1906   	; 0x11d0 <LOAD_1_SetDirection>
    if (LOAD_1_IsOn()) {
     a5e:	be d3       	rcall	.+1916   	; 0x11dc <LOAD_1_IsOn>
     a60:	88 23       	and	r24, r24
     a62:	31 f1       	breq	.+76     	; 0xab0 <PERFORMER_Execute+0xba>
        if (w & (1 << 4)) {
     a64:	14 ff       	sbrs	r17, 4
     a66:	10 c0       	rjmp	.+32     	; 0xa88 <PERFORMER_Execute+0x92>
            // Направление назад.
            if (w & (1 << 2)) {
     a68:	12 ff       	sbrs	r17, 2
     a6a:	03 c0       	rjmp	.+6      	; 0xa72 <PERFORMER_Execute+0x7c>
                // Отключить нагрузку, если концевик 2 замкнут.
                if (!IS_IN2) {LOAD_1_Off(); PERFORMER_Regs[7] |= (3 << 8);}
     a6c:	33 99       	sbic	0x06, 3	; 6
     a6e:	20 c0       	rjmp	.+64     	; 0xab0 <PERFORMER_Execute+0xba>
     a70:	04 c0       	rjmp	.+8      	; 0xa7a <PERFORMER_Execute+0x84>
            } else if (w & (1 << 3)) {
     a72:	13 ff       	sbrs	r17, 3
     a74:	1d c0       	rjmp	.+58     	; 0xab0 <PERFORMER_Execute+0xba>
                // Отключить нагрузку, если концевик 2 разомкнут.
                if (IS_IN2) {LOAD_1_Off();  PERFORMER_Regs[7] |= (3 << 8);}
     a76:	33 9b       	sbis	0x06, 3	; 6
     a78:	1b c0       	rjmp	.+54     	; 0xab0 <PERFORMER_Execute+0xba>
     a7a:	a8 d3       	rcall	.+1872   	; 0x11cc <LOAD_1_Off>
     a7c:	80 91 bd 01 	lds	r24, 0x01BD
     a80:	90 91 be 01 	lds	r25, 0x01BE
     a84:	93 60       	ori	r25, 0x03	; 3
     a86:	10 c0       	rjmp	.+32     	; 0xaa8 <PERFORMER_Execute+0xb2>
            }
        } else {
            // Направление вперед.
            if (w & (1 << 0)) {
     a88:	10 ff       	sbrs	r17, 0
     a8a:	03 c0       	rjmp	.+6      	; 0xa92 <PERFORMER_Execute+0x9c>
                // Отключить нагрузку, если концевик 1 замкнут.
                if (!IS_IN1) { LOAD_1_Off(); PERFORMER_Regs[7] &= ~(3 << 8); PERFORMER_Regs[7] |= (2 << 8); }
     a8c:	4a 99       	sbic	0x09, 2	; 9
     a8e:	10 c0       	rjmp	.+32     	; 0xab0 <PERFORMER_Execute+0xba>
     a90:	04 c0       	rjmp	.+8      	; 0xa9a <PERFORMER_Execute+0xa4>
            } else if (w & (1 << 1)) {
     a92:	11 ff       	sbrs	r17, 1
     a94:	0d c0       	rjmp	.+26     	; 0xab0 <PERFORMER_Execute+0xba>
                // Отключить нагрузку, если концевик 1 разомкнут.
                if (IS_IN1) { LOAD_1_Off();  PERFORMER_Regs[7] &= ~(3 << 8); PERFORMER_Regs[7] |= (2 << 8); }
     a96:	4a 9b       	sbis	0x09, 2	; 9
     a98:	0b c0       	rjmp	.+22     	; 0xab0 <PERFORMER_Execute+0xba>
     a9a:	98 d3       	rcall	.+1840   	; 0x11cc <LOAD_1_Off>
     a9c:	80 91 bd 01 	lds	r24, 0x01BD
     aa0:	90 91 be 01 	lds	r25, 0x01BE
     aa4:	9c 7f       	andi	r25, 0xFC	; 252
     aa6:	92 60       	ori	r25, 0x02	; 2
     aa8:	90 93 be 01 	sts	0x01BE, r25
     aac:	80 93 bd 01 	sts	0x01BD, r24





}
     ab0:	1f 91       	pop	r17
     ab2:	08 95       	ret

00000ab4 <PERFORMER_WriteCoil>:
    return PERFORMER_Coils[addr];
}

void PERFORMER_WriteCoil(WORD addr, WORD value)
{
    if (addr >= PERFORMER_MAX_COILS) return;
     ab4:	88 30       	cpi	r24, 0x08	; 8
     ab6:	91 05       	cpc	r25, r1
     ab8:	a0 f5       	brcc	.+104    	; 0xb22 <PERFORMER_WriteCoil+0x6e>
    if (value != MODBUS_COIL_ON && value != MODBUS_COIL_OFF) return;
     aba:	2f ef       	ldi	r18, 0xFF	; 255
     abc:	60 30       	cpi	r22, 0x00	; 0
     abe:	72 07       	cpc	r23, r18
     ac0:	19 f0       	breq	.+6      	; 0xac8 <PERFORMER_WriteCoil+0x14>
     ac2:	61 15       	cp	r22, r1
     ac4:	71 05       	cpc	r23, r1
     ac6:	69 f5       	brne	.+90     	; 0xb22 <PERFORMER_WriteCoil+0x6e>

    PERFORMER_Coils[addr] = value;
     ac8:	fc 01       	movw	r30, r24
     aca:	ee 0f       	add	r30, r30
     acc:	ff 1f       	adc	r31, r31
     ace:	e1 53       	subi	r30, 0x31	; 49
     ad0:	fe 4f       	sbci	r31, 0xFE	; 254
     ad2:	71 83       	std	Z+1, r23	; 0x01
     ad4:	60 83       	st	Z, r22

    switch (addr)
     ad6:	81 30       	cpi	r24, 0x01	; 1
     ad8:	91 05       	cpc	r25, r1
     ada:	81 f0       	breq	.+32     	; 0xafc <PERFORMER_WriteCoil+0x48>
     adc:	81 30       	cpi	r24, 0x01	; 1
     ade:	91 05       	cpc	r25, r1
     ae0:	18 f0       	brcs	.+6      	; 0xae8 <PERFORMER_WriteCoil+0x34>
     ae2:	02 97       	sbiw	r24, 0x02	; 2
     ae4:	f1 f4       	brne	.+60     	; 0xb22 <PERFORMER_WriteCoil+0x6e>
     ae6:	18 c0       	rjmp	.+48     	; 0xb18 <PERFORMER_WriteCoil+0x64>
    {
    case 0: // Управление нагрузкой 1.
        if (value) LOAD_1_On(PERFORMER_Regs[6]);
     ae8:	67 2b       	or	r22, r23
     aea:	31 f0       	breq	.+12     	; 0xaf8 <PERFORMER_WriteCoil+0x44>
     aec:	80 91 bb 01 	lds	r24, 0x01BB
     af0:	90 91 bc 01 	lds	r25, 0x01BC
     af4:	65 d3       	rcall	.+1738   	; 0x11c0 <LOAD_1_On>
     af6:	08 95       	ret
        else       LOAD_1_Off();
     af8:	69 d3       	rcall	.+1746   	; 0x11cc <LOAD_1_Off>
     afa:	08 95       	ret
        break;

    case 1: // Управление нагрузкой 2.
        if (value) LOAD_2_On(PERFORMER_Regs[8], PERFORMER_Regs[9]);
     afc:	67 2b       	or	r22, r23
     afe:	51 f0       	breq	.+20     	; 0xb14 <PERFORMER_WriteCoil+0x60>
     b00:	60 91 c1 01 	lds	r22, 0x01C1
     b04:	70 91 c2 01 	lds	r23, 0x01C2
     b08:	80 91 bf 01 	lds	r24, 0x01BF
     b0c:	90 91 c0 01 	lds	r25, 0x01C0
     b10:	68 d3       	rcall	.+1744   	; 0x11e2 <LOAD_2_On>
     b12:	08 95       	ret
        else       LOAD_2_Off();
     b14:	74 d3       	rcall	.+1768   	; 0x11fe <LOAD_2_Off>
     b16:	08 95       	ret
        break;

    case 2: // Управление нагрузкой 3.
        if (value) LOAD3_ON;
     b18:	67 2b       	or	r22, r23
     b1a:	11 f0       	breq	.+4      	; 0xb20 <PERFORMER_WriteCoil+0x6c>
     b1c:	42 9a       	sbi	0x08, 2	; 8
     b1e:	08 95       	ret
        else       LOAD3_OFF;
     b20:	42 98       	cbi	0x08, 2	; 8
     b22:	08 95       	ret

00000b24 <ADC_Init>:
void adc_SetNextChannel();

//------------------------------------------------------------------------
void ADC_Init()
{
    ADCSRB = (0 << ADPS0) | (0 << ADPS1);
     b24:	10 92 7b 00 	sts	0x007B, r1
// DIDR0  = (0 << ADC0D) | (0 << ADC1D);

    adc_channel_mask = 0;
     b28:	10 92 e3 01 	sts	0x01E3, r1
    adc_index = 0;
     b2c:	10 92 e2 01 	sts	0x01E2, r1
}
     b30:	08 95       	ret

00000b32 <ADC_Stop>:
    ADCSRA |= (1 << ADSC);  // Start Conversion
}
//------------------------------------------------------------------------
void ADC_Stop()
{
    adc_channel_mask = 0;
     b32:	10 92 e3 01 	sts	0x01E3, r1
    ADC_Disable;
     b36:	80 e1       	ldi	r24, 0x10	; 16
     b38:	80 93 7a 00 	sts	0x007A, r24
}
     b3c:	08 95       	ret

00000b3e <ADC_GetValue>:

//------------------------------------------------------------------------
WORD ADC_GetValue(BYTE channel)
{
//    return adc_values[channel][0];
	if (channel < ADC_MAX_CHANNELS) 
     b3e:	88 30       	cpi	r24, 0x08	; 8
     b40:	18 f0       	brcs	.+6      	; 0xb48 <ADC_GetValue+0xa>
     b42:	20 e0       	ldi	r18, 0x00	; 0
     b44:	30 e0       	ldi	r19, 0x00	; 0
     b46:	1b c0       	rjmp	.+54     	; 0xb7e <ADC_GetValue+0x40>
     b48:	90 e0       	ldi	r25, 0x00	; 0
     b4a:	25 e0       	ldi	r18, 0x05	; 5
     b4c:	88 0f       	add	r24, r24
     b4e:	99 1f       	adc	r25, r25
     b50:	2a 95       	dec	r18
     b52:	e1 f7       	brne	.-8      	; 0xb4c <ADC_GetValue+0xe>
     b54:	fc 01       	movw	r30, r24
     b56:	e4 51       	subi	r30, 0x14	; 20
     b58:	fe 4f       	sbci	r31, 0xFE	; 254
     b5a:	40 e0       	ldi	r20, 0x00	; 0
     b5c:	50 e0       	ldi	r21, 0x00	; 0
	{
		// Высчитываем среднее значение.
		WORD res = 0;
		BYTE b;
		for (b = 0; b < ADC_NUMBER_OF_MEASUREMENTS; b++)
     b5e:	9c 01       	movw	r18, r24
     b60:	24 5f       	subi	r18, 0xF4	; 244
     b62:	3d 4f       	sbci	r19, 0xFD	; 253
			res +=  adc_values[channel][b];
     b64:	81 91       	ld	r24, Z+
     b66:	91 91       	ld	r25, Z+
     b68:	48 0f       	add	r20, r24
     b6a:	59 1f       	adc	r21, r25
	if (channel < ADC_MAX_CHANNELS) 
	{
		// Высчитываем среднее значение.
		WORD res = 0;
		BYTE b;
		for (b = 0; b < ADC_NUMBER_OF_MEASUREMENTS; b++)
     b6c:	e2 17       	cp	r30, r18
     b6e:	f3 07       	cpc	r31, r19
     b70:	c9 f7       	brne	.-14     	; 0xb64 <ADC_GetValue+0x26>
			res +=  adc_values[channel][b];

		return (res / ADC_NUMBER_OF_MEASUREMENTS);
     b72:	9a 01       	movw	r18, r20
     b74:	84 e0       	ldi	r24, 0x04	; 4
     b76:	36 95       	lsr	r19
     b78:	27 95       	ror	r18
     b7a:	8a 95       	dec	r24
     b7c:	e1 f7       	brne	.-8      	; 0xb76 <ADC_GetValue+0x38>
	}
    return 0;
}
     b7e:	c9 01       	movw	r24, r18
     b80:	08 95       	ret

00000b82 <adc_SetNextChannel>:

//------------------------------------------------------------------------
void adc_SetNextChannel()
{
    if (adc_index++ > adc_count) adc_index = 0;
     b82:	80 91 e2 01 	lds	r24, 0x01E2
     b86:	90 91 e1 01 	lds	r25, 0x01E1
     b8a:	8f 5f       	subi	r24, 0xFF	; 255
     b8c:	80 93 e2 01 	sts	0x01E2, r24
     b90:	81 50       	subi	r24, 0x01	; 1
     b92:	98 17       	cp	r25, r24
     b94:	10 f4       	brcc	.+4      	; 0xb9a <adc_SetNextChannel+0x18>
     b96:	10 92 e2 01 	sts	0x01E2, r1
    BYTE b = adc_channels[adc_index];
     b9a:	80 91 e2 01 	lds	r24, 0x01E2
     b9e:	e0 91 df 01 	lds	r30, 0x01DF
     ba2:	f0 91 e0 01 	lds	r31, 0x01E0
     ba6:	e8 0f       	add	r30, r24
     ba8:	f1 1d       	adc	r31, r1
     baa:	e0 81       	ld	r30, Z
    if (b < ADC_MAX_CHANNELS) ADMUX = b;
     bac:	e8 30       	cpi	r30, 0x08	; 8
     bae:	10 f4       	brcc	.+4      	; 0xbb4 <adc_SetNextChannel+0x32>
     bb0:	e0 93 7c 00 	sts	0x007C, r30
     bb4:	08 95       	ret

00000bb6 <ADC_Start>:
    adc_index = 0;
}
//------------------------------------------------------------------------

void ADC_Start(BYTE *channels, BYTE count)
{
     bb6:	0f 93       	push	r16
     bb8:	1f 93       	push	r17
    ADC_Disable;
     bba:	0a e7       	ldi	r16, 0x7A	; 122
     bbc:	10 e0       	ldi	r17, 0x00	; 0
     bbe:	20 e1       	ldi	r18, 0x10	; 16
     bc0:	f8 01       	movw	r30, r16
     bc2:	20 83       	st	Z, r18

    adc_channels = channels;
     bc4:	90 93 e0 01 	sts	0x01E0, r25
     bc8:	80 93 df 01 	sts	0x01DF, r24
    adc_count    = count;
     bcc:	60 93 e1 01 	sts	0x01E1, r22
    adc_index    = 0;
     bd0:	10 92 e2 01 	sts	0x01E2, r1

    adc_SetNextChannel();
     bd4:	d6 df       	rcall	.-84     	; 0xb82 <adc_SetNextChannel>
    // Получаем значение выбранного канала
    ADC_Enable;
     bd6:	8f e9       	ldi	r24, 0x9F	; 159
     bd8:	f8 01       	movw	r30, r16
     bda:	80 83       	st	Z, r24
    ADCSRA |= (1 << ADSC);  // Start Conversion
     bdc:	80 81       	ld	r24, Z
     bde:	80 64       	ori	r24, 0x40	; 64
     be0:	80 83       	st	Z, r24
}
     be2:	1f 91       	pop	r17
     be4:	0f 91       	pop	r16
     be6:	08 95       	ret

00000be8 <__vector_21>:
    BYTE b = adc_channels[adc_index];
    if (b < ADC_MAX_CHANNELS) ADMUX = b;
}

ISR(ADC_vect)
{	
     be8:	1f 92       	push	r1
     bea:	0f 92       	push	r0
     bec:	0f b6       	in	r0, 0x3f	; 63
     bee:	0f 92       	push	r0
     bf0:	11 24       	eor	r1, r1
     bf2:	2f 93       	push	r18
     bf4:	3f 93       	push	r19
     bf6:	4f 93       	push	r20
     bf8:	5f 93       	push	r21
     bfa:	6f 93       	push	r22
     bfc:	7f 93       	push	r23
     bfe:	8f 93       	push	r24
     c00:	9f 93       	push	r25
     c02:	af 93       	push	r26
     c04:	bf 93       	push	r27
     c06:	ef 93       	push	r30
     c08:	ff 93       	push	r31
	BYTE mux = ADMUX;
     c0a:	e0 91 7c 00 	lds	r30, 0x007C

    adc_values[mux][adc_index_measurement[mux]] = ADC;
     c0e:	f0 e0       	ldi	r31, 0x00	; 0
     c10:	df 01       	movw	r26, r30
     c12:	ac 51       	subi	r26, 0x1C	; 28
     c14:	be 4f       	sbci	r27, 0xFE	; 254
     c16:	8c 91       	ld	r24, X
     c18:	20 91 78 00 	lds	r18, 0x0078
     c1c:	30 91 79 00 	lds	r19, 0x0079
     c20:	54 e0       	ldi	r21, 0x04	; 4
     c22:	ee 0f       	add	r30, r30
     c24:	ff 1f       	adc	r31, r31
     c26:	5a 95       	dec	r21
     c28:	e1 f7       	brne	.-8      	; 0xc22 <__vector_21+0x3a>
     c2a:	e8 0f       	add	r30, r24
     c2c:	f1 1d       	adc	r31, r1
     c2e:	ee 0f       	add	r30, r30
     c30:	ff 1f       	adc	r31, r31
     c32:	e4 51       	subi	r30, 0x14	; 20
     c34:	fe 4f       	sbci	r31, 0xFE	; 254
     c36:	31 83       	std	Z+1, r19	; 0x01
     c38:	20 83       	st	Z, r18
//    adc_values[mux][0] = ADC;

	if (++adc_index_measurement[mux] == ADC_NUMBER_OF_MEASUREMENTS)
     c3a:	8f 5f       	subi	r24, 0xFF	; 255
     c3c:	8c 93       	st	X, r24
     c3e:	80 31       	cpi	r24, 0x10	; 16
     c40:	11 f4       	brne	.+4      	; 0xc46 <__vector_21+0x5e>
	{
		adc_index_measurement[mux] = 0;
     c42:	1c 92       	st	X, r1
		// Следующий канал замеряем только после ADC_NUMBER_OF_MEASUREMENTS замеров текущего.
	    adc_SetNextChannel();
     c44:	9e df       	rcall	.-196    	; 0xb82 <adc_SetNextChannel>
	}
    ADCSRA |= (1 << ADSC);  // Start Conversion
     c46:	80 91 7a 00 	lds	r24, 0x007A
     c4a:	80 64       	ori	r24, 0x40	; 64
     c4c:	80 93 7a 00 	sts	0x007A, r24
}
     c50:	ff 91       	pop	r31
     c52:	ef 91       	pop	r30
     c54:	bf 91       	pop	r27
     c56:	af 91       	pop	r26
     c58:	9f 91       	pop	r25
     c5a:	8f 91       	pop	r24
     c5c:	7f 91       	pop	r23
     c5e:	6f 91       	pop	r22
     c60:	5f 91       	pop	r21
     c62:	4f 91       	pop	r20
     c64:	3f 91       	pop	r19
     c66:	2f 91       	pop	r18
     c68:	0f 90       	pop	r0
     c6a:	0f be       	out	0x3f, r0	; 63
     c6c:	0f 90       	pop	r0
     c6e:	1f 90       	pop	r1
     c70:	18 95       	reti

00000c72 <FindFamily>:
 *
 *  \return A pointer to a device of the family.
 *  \retval NULL    if no device of the family was found.
 */
unsigned char FindFamily(unsigned char familyID, OWI_device * devices, unsigned char numDevices, unsigned char lastNum)
{
     c72:	98 2f       	mov	r25, r24
     c74:	fb 01       	movw	r30, r22
    unsigned char i;
    
    if (lastNum == AT_FIRST){
     c76:	2f 3f       	cpi	r18, 0xFF	; 255
     c78:	31 f4       	brne	.+12     	; 0xc86 <FindFamily+0x14>
     c7a:	20 e0       	ldi	r18, 0x00	; 0
     c7c:	05 c0       	rjmp	.+10     	; 0xc88 <FindFamily+0x16>
      
    // Search through the array.
    while (i < numDevices)
    {
        // Return the pointer if there is a family id match.
        if ((*devices).id[0] == familyID)
     c7e:	80 81       	ld	r24, Z
     c80:	89 17       	cp	r24, r25
     c82:	29 f0       	breq	.+10     	; 0xc8e <FindFamily+0x1c>
        {
            return i;
        }
        devices++;
     c84:	38 96       	adiw	r30, 0x08	; 8
        i++;
     c86:	2f 5f       	subi	r18, 0xFF	; 255
    else{
      i = lastNum + 1;      
    }
      
    // Search through the array.
    while (i < numDevices)
     c88:	24 17       	cp	r18, r20
     c8a:	c8 f3       	brcs	.-14     	; 0xc7e <FindFamily+0xc>
     c8c:	2f ef       	ldi	r18, 0xFF	; 255
        }
        devices++;
        i++;
    }
    return SEARCH_ERROR;
}
     c8e:	82 2f       	mov	r24, r18
     c90:	08 95       	ret

00000c92 <OWI_ReceiveByte>:
 *  \param  pin     A bitmask of the bus to read from.
 *  
 *  \return     The byte read from the bus.
 */
unsigned char OWI_ReceiveByte(unsigned char pin)
{
     c92:	ff 92       	push	r15
     c94:	0f 93       	push	r16
     c96:	1f 93       	push	r17
     c98:	f8 2e       	mov	r15, r24
     c9a:	10 e0       	ldi	r17, 0x00	; 0
     c9c:	00 e0       	ldi	r16, 0x00	; 0
    
    // Do once for each bit
    for (i = 0; i < 8; i++)
    {
        // Shift temporary input variable right.
        data >>= 1;
     c9e:	16 95       	lsr	r17
        // Set the msb if a '1' value is read from the bus.
        // Leave as it is ('0') else.
        if (OWI_ReadBit(pin))
     ca0:	8f 2d       	mov	r24, r15
     ca2:	4e d1       	rcall	.+668    	; 0xf40 <OWI_ReadBit>
     ca4:	81 11       	cpse	r24, r1
        {
            // Set msb
            data |= 0x80;
     ca6:	10 68       	ori	r17, 0x80	; 128

    // Clear the temporary input variable.
    data = 0x00;
    
    // Do once for each bit
    for (i = 0; i < 8; i++)
     ca8:	0f 5f       	subi	r16, 0xFF	; 255
     caa:	08 30       	cpi	r16, 0x08	; 8
     cac:	c1 f7       	brne	.-16     	; 0xc9e <OWI_ReceiveByte+0xc>
            // Set msb
            data |= 0x80;
        }
    }
    return data;
}
     cae:	81 2f       	mov	r24, r17
     cb0:	1f 91       	pop	r17
     cb2:	0f 91       	pop	r16
     cb4:	ff 90       	pop	r15
     cb6:	08 95       	ret

00000cb8 <OWI_SendByte>:
 *  \param  data    The data to send on the bus(es).
 *  
 *  \param  pins    A bitmask of the buses to send the data to.
 */
void OWI_SendByte(unsigned char data, unsigned char pin)
{
     cb8:	ff 92       	push	r15
     cba:	0f 93       	push	r16
     cbc:	1f 93       	push	r17
     cbe:	08 2f       	mov	r16, r24
     cc0:	f6 2e       	mov	r15, r22
     cc2:	10 e0       	ldi	r17, 0x00	; 0
    for (i = 0; i < 8; i++)
    {
        // Determine if lsb is '0' or '1' and transmit corresponding
        // waveform on the bus.
        temp = data & 0x01;
        if (temp)
     cc4:	00 ff       	sbrs	r16, 0
     cc6:	03 c0       	rjmp	.+6      	; 0xcce <OWI_SendByte+0x16>
        {
            OWI_WriteBit1(pin);
     cc8:	8f 2d       	mov	r24, r15
     cca:	0a d1       	rcall	.+532    	; 0xee0 <OWI_WriteBit1>
     ccc:	02 c0       	rjmp	.+4      	; 0xcd2 <OWI_SendByte+0x1a>
        }
        else
        {
            OWI_WriteBit0(pin);
     cce:	8f 2d       	mov	r24, r15
     cd0:	1f d1       	rcall	.+574    	; 0xf10 <OWI_WriteBit0>
{
    unsigned char temp;
    unsigned char i;
    
    // Do once for each bit
    for (i = 0; i < 8; i++)
     cd2:	1f 5f       	subi	r17, 0xFF	; 255
     cd4:	18 30       	cpi	r17, 0x08	; 8
     cd6:	11 f0       	breq	.+4      	; 0xcdc <OWI_SendByte+0x24>
        else
        {
            OWI_WriteBit0(pin);
        }
        // Right shift the data to get next bit.
        data >>= 1;
     cd8:	06 95       	lsr	r16
     cda:	f4 cf       	rjmp	.-24     	; 0xcc4 <OWI_SendByte+0xc>
    }
}
     cdc:	1f 91       	pop	r17
     cde:	0f 91       	pop	r16
     ce0:	ff 90       	pop	r15
     ce2:	08 95       	ret

00000ce4 <OWI_MatchRom>:
 *  \param  romValue    A pointer to the ID to match against.
 *
 *  \param  pins    A bitmask of the buses to perform the MATCH ROM command on.
 */
void OWI_MatchRom(unsigned char * romValue, unsigned char pin)
{
     ce4:	0f 93       	push	r16
     ce6:	1f 93       	push	r17
     ce8:	cf 93       	push	r28
     cea:	df 93       	push	r29
     cec:	ec 01       	movw	r28, r24
     cee:	06 2f       	mov	r16, r22
    unsigned char bytesLeft = 8;   
    
    // Send the MATCH ROM command.
    OWI_SendByte(OWI_ROM_MATCH, pin);
     cf0:	85 e5       	ldi	r24, 0x55	; 85
     cf2:	e2 df       	rcall	.-60     	; 0xcb8 <OWI_SendByte>
     cf4:	18 e0       	ldi	r17, 0x08	; 8

    // Do once for each byte.
    while (bytesLeft > 0)
    {
        // Transmit 1 byte of the ID to match.
        OWI_SendByte(*romValue++, pin);
     cf6:	89 91       	ld	r24, Y+
     cf8:	60 2f       	mov	r22, r16
     cfa:	de df       	rcall	.-68     	; 0xcb8 <OWI_SendByte>
        bytesLeft--;
     cfc:	11 50       	subi	r17, 0x01	; 1
    
    // Send the MATCH ROM command.
    OWI_SendByte(OWI_ROM_MATCH, pin);

    // Do once for each byte.
    while (bytesLeft > 0)
     cfe:	d9 f7       	brne	.-10     	; 0xcf6 <OWI_MatchRom+0x12>
    {
        // Transmit 1 byte of the ID to match.
        OWI_SendByte(*romValue++, pin);
        bytesLeft--;
    }
}
     d00:	df 91       	pop	r29
     d02:	cf 91       	pop	r28
     d04:	1f 91       	pop	r17
     d06:	0f 91       	pop	r16
     d08:	08 95       	ret

00000d0a <OWI_ReadRom>:
 *  \param  romValue    A pointer where the id will be placed.
 *
 *  \param  pin     A bitmask of the bus to read from.
 */
void OWI_ReadRom(unsigned char * romValue, unsigned char pin)
{
     d0a:	0f 93       	push	r16
     d0c:	1f 93       	push	r17
     d0e:	cf 93       	push	r28
     d10:	df 93       	push	r29
     d12:	ec 01       	movw	r28, r24
     d14:	06 2f       	mov	r16, r22
    unsigned char bytesLeft = 8;

    // Send the READ ROM command on the bus.
    OWI_SendByte(OWI_ROM_READ, pin);
     d16:	83 e3       	ldi	r24, 0x33	; 51
     d18:	cf df       	rcall	.-98     	; 0xcb8 <OWI_SendByte>
     d1a:	18 e0       	ldi	r17, 0x08	; 8
    
    // Do 8 times.
    while (bytesLeft > 0)
    {
        // Place the received data in memory.
        *romValue++ = OWI_ReceiveByte(pin);
     d1c:	80 2f       	mov	r24, r16
     d1e:	b9 df       	rcall	.-142    	; 0xc92 <OWI_ReceiveByte>
     d20:	89 93       	st	Y+, r24
        bytesLeft--;
     d22:	11 50       	subi	r17, 0x01	; 1

    // Send the READ ROM command on the bus.
    OWI_SendByte(OWI_ROM_READ, pin);
    
    // Do 8 times.
    while (bytesLeft > 0)
     d24:	d9 f7       	brne	.-10     	; 0xd1c <OWI_ReadRom+0x12>
    {
        // Place the received data in memory.
        *romValue++ = OWI_ReceiveByte(pin);
        bytesLeft--;
    }
}
     d26:	df 91       	pop	r29
     d28:	cf 91       	pop	r28
     d2a:	1f 91       	pop	r17
     d2c:	0f 91       	pop	r16
     d2e:	08 95       	ret

00000d30 <OWI_SkipRom>:
/*! \brief  Sends the SKIP ROM command to the 1-Wire bus(es).
 *
 *  \param  pins    A bitmask of the buses to send the SKIP ROM command to.
 */
void OWI_SkipRom(unsigned char pin)
{
     d30:	68 2f       	mov	r22, r24
    // Send the SKIP ROM command on the bus.
    OWI_SendByte(OWI_ROM_SKIP, pin);
     d32:	8c ec       	ldi	r24, 0xCC	; 204
     d34:	c1 df       	rcall	.-126    	; 0xcb8 <OWI_SendByte>
}
     d36:	08 95       	ret

00000d38 <OWI_SearchRom>:
 *  \return The last bit position where there was a discrepancy between slave addresses the last time this function was run. Returns OWI_ROM_SEARCH_FAILED if an error was detected (e.g. a device was connected to the bus during the search), or OWI_ROM_SEARCH_FINISHED when there are no more devices to be discovered.
 *
 *  \note   See main.c for an example of how to utilize this function.
 */
unsigned char OWI_SearchRom(unsigned char * bitPattern, unsigned char lastDeviation, unsigned char pin)
{
     d38:	af 92       	push	r10
     d3a:	bf 92       	push	r11
     d3c:	df 92       	push	r13
     d3e:	ef 92       	push	r14
     d40:	ff 92       	push	r15
     d42:	0f 93       	push	r16
     d44:	1f 93       	push	r17
     d46:	df 93       	push	r29
     d48:	cf 93       	push	r28
     d4a:	0f 92       	push	r0
     d4c:	cd b7       	in	r28, 0x3d	; 61
     d4e:	de b7       	in	r29, 0x3e	; 62
     d50:	5c 01       	movw	r10, r24
     d52:	d6 2e       	mov	r13, r22
     d54:	f4 2e       	mov	r15, r20
    unsigned char bitMask = 0x01;
    unsigned char bitA;
    unsigned char bitB;

    // Send SEARCH ROM command on the bus.
    OWI_SendByte(OWI_ROM_SEARCH, pin);
     d56:	80 ef       	ldi	r24, 0xF0	; 240
     d58:	64 2f       	mov	r22, r20
     d5a:	ae df       	rcall	.-164    	; 0xcb8 <OWI_SendByte>
     d5c:	11 e0       	ldi	r17, 0x01	; 1
     d5e:	ee 24       	eor	r14, r14
     d60:	01 e0       	ldi	r16, 0x01	; 1
    
    // Walk through all 64 bits.
    while (currentBit <= 64)
    {
        // Read bit from bus twice.
        bitA = OWI_ReadBit(pin);
     d62:	8f 2d       	mov	r24, r15
     d64:	ed d0       	rcall	.+474    	; 0xf40 <OWI_ReadBit>
     d66:	89 83       	std	Y+1, r24	; 0x01
        bitB = OWI_ReadBit(pin);
     d68:	8f 2d       	mov	r24, r15
     d6a:	ea d0       	rcall	.+468    	; 0xf40 <OWI_ReadBit>

        if (bitA && bitB)
     d6c:	99 81       	ldd	r25, Y+1	; 0x01
     d6e:	99 23       	and	r25, r25
     d70:	29 f0       	breq	.+10     	; 0xd7c <OWI_SearchRom+0x44>
     d72:	88 23       	and	r24, r24
     d74:	71 f0       	breq	.+28     	; 0xd92 <OWI_SearchRom+0x5a>
     d76:	ee 24       	eor	r14, r14
     d78:	ea 94       	dec	r14
     d7a:	2d c0       	rjmp	.+90     	; 0xdd6 <OWI_SearchRom+0x9e>
        {
            // Both bits 1 (Error).
            newDeviation = OWI_ROM_SEARCH_FAILED;
            return SEARCH_ERROR;
        }
        else if (bitA ^ bitB)
     d7c:	88 23       	and	r24, r24
     d7e:	39 f0       	breq	.+14     	; 0xd8e <OWI_SearchRom+0x56>
            {
                (*bitPattern) |= bitMask;
            }
            else
            {
                (*bitPattern) &= ~bitMask;
     d80:	90 2f       	mov	r25, r16
     d82:	90 95       	com	r25
     d84:	f5 01       	movw	r30, r10
     d86:	80 81       	ld	r24, Z
     d88:	89 23       	and	r24, r25
     d8a:	80 83       	st	Z, r24
     d8c:	12 c0       	rjmp	.+36     	; 0xdb2 <OWI_SearchRom+0x7a>
        }
        else // Both bits 0
        {
            // If this is where a choice was made the last time,
            // a '1' bit is selected this time.
            if (currentBit == lastDeviation)
     d8e:	1d 15       	cp	r17, r13
     d90:	21 f4       	brne	.+8      	; 0xd9a <OWI_SearchRom+0x62>
            {
                (*bitPattern) |= bitMask;
     d92:	f5 01       	movw	r30, r10
     d94:	80 81       	ld	r24, Z
     d96:	80 2b       	or	r24, r16
     d98:	f8 cf       	rjmp	.-16     	; 0xd8a <OWI_SearchRom+0x52>
     d9a:	f5 01       	movw	r30, r10
     d9c:	90 81       	ld	r25, Z
            }
            // For the rest of the id, '0' bits are selected when
            // discrepancies occur.
            else if (currentBit > lastDeviation)
     d9e:	d1 16       	cp	r13, r17
     da0:	28 f4       	brcc	.+10     	; 0xdac <OWI_SearchRom+0x74>
            {
                (*bitPattern) &= ~bitMask;
     da2:	80 2f       	mov	r24, r16
     da4:	80 95       	com	r24
     da6:	98 23       	and	r25, r24
     da8:	90 83       	st	Z, r25
     daa:	02 c0       	rjmp	.+4      	; 0xdb0 <OWI_SearchRom+0x78>
                newDeviation = currentBit;
            }
            // If current bit in bit pattern = 0, then this is
            // out new deviation.
            else if ( !(*bitPattern & bitMask)) 
     dac:	90 23       	and	r25, r16
     dae:	09 f4       	brne	.+2      	; 0xdb2 <OWI_SearchRom+0x7a>
     db0:	e1 2e       	mov	r14, r17
            }
        }
                
        
        // Send the selected bit to the bus.
        if ((*bitPattern) & bitMask)
     db2:	f5 01       	movw	r30, r10
     db4:	80 81       	ld	r24, Z
     db6:	80 23       	and	r24, r16
     db8:	19 f0       	breq	.+6      	; 0xdc0 <OWI_SearchRom+0x88>
        {
            OWI_WriteBit1(pin);
     dba:	8f 2d       	mov	r24, r15
     dbc:	91 d0       	rcall	.+290    	; 0xee0 <OWI_WriteBit1>
     dbe:	02 c0       	rjmp	.+4      	; 0xdc4 <OWI_SearchRom+0x8c>
        }
        else
        {
            OWI_WriteBit0(pin);
     dc0:	8f 2d       	mov	r24, r15
     dc2:	a6 d0       	rcall	.+332    	; 0xf10 <OWI_WriteBit0>
        }

        // Increment current bit.    
        currentBit++;
     dc4:	1f 5f       	subi	r17, 0xFF	; 255

        // Adjust bitMask and bitPattern pointer.    
        bitMask <<= 1;
     dc6:	00 0f       	add	r16, r16
        if (!bitMask)
     dc8:	21 f4       	brne	.+8      	; 0xdd2 <OWI_SearchRom+0x9a>
        {
            bitMask = 0x01;
            bitPattern++;
     dca:	08 94       	sec
     dcc:	a1 1c       	adc	r10, r1
     dce:	b1 1c       	adc	r11, r1
     dd0:	01 e0       	ldi	r16, 0x01	; 1

    // Send SEARCH ROM command on the bus.
    OWI_SendByte(OWI_ROM_SEARCH, pin);
    
    // Walk through all 64 bits.
    while (currentBit <= 64)
     dd2:	11 34       	cpi	r17, 0x41	; 65
     dd4:	31 f6       	brne	.-116    	; 0xd62 <OWI_SearchRom+0x2a>
            bitMask = 0x01;
            bitPattern++;
        }
    }
    return newDeviation;
}
     dd6:	8e 2d       	mov	r24, r14
     dd8:	0f 90       	pop	r0
     dda:	cf 91       	pop	r28
     ddc:	df 91       	pop	r29
     dde:	1f 91       	pop	r17
     de0:	0f 91       	pop	r16
     de2:	ff 90       	pop	r15
     de4:	ef 90       	pop	r14
     de6:	df 90       	pop	r13
     de8:	bf 90       	pop	r11
     dea:	af 90       	pop	r10
     dec:	08 95       	ret

00000dee <OWI_SearchDevices>:
 *  \retval SEARCH_SUCCESSFUL   Search completed successfully.
 *  \retval SEARCH_CRC_ERROR    A CRC error occured. Probably because of noise
 *                              during transmission.
 */
unsigned char OWI_SearchDevices(OWI_device * devices, unsigned char numDevices, unsigned char pin, unsigned char *num)
{
     dee:	9f 92       	push	r9
     df0:	af 92       	push	r10
     df2:	bf 92       	push	r11
     df4:	cf 92       	push	r12
     df6:	df 92       	push	r13
     df8:	ef 92       	push	r14
     dfa:	ff 92       	push	r15
     dfc:	0f 93       	push	r16
     dfe:	1f 93       	push	r17
     e00:	cf 93       	push	r28
     e02:	df 93       	push	r29
     e04:	ec 01       	movw	r28, r24
     e06:	94 2e       	mov	r9, r20
     e08:	59 01       	movw	r10, r18
     e0a:	7c 01       	movw	r14, r24
     e0c:	9c 01       	movw	r18, r24
     e0e:	40 e0       	ldi	r20, 0x00	; 0
     e10:	0b c0       	rjmp	.+22     	; 0xe28 <OWI_SearchDevices+0x3a>
    //сбрасываем адреса 1Wire устройств    
    for (i = 0; i < numDevices; i++)
    {
        for (j = 0; j < 8; j++)
        {
            devices[i].id[j] = 0x00;
     e12:	f9 01       	movw	r30, r18
     e14:	e8 0f       	add	r30, r24
     e16:	f9 1f       	adc	r31, r25
     e18:	10 82       	st	Z, r1
     e1a:	01 96       	adiw	r24, 0x01	; 1
    unsigned char flag = SEARCH_SUCCESSFUL;
    
    //сбрасываем адреса 1Wire устройств    
    for (i = 0; i < numDevices; i++)
    {
        for (j = 0; j < 8; j++)
     e1c:	88 30       	cpi	r24, 0x08	; 8
     e1e:	91 05       	cpc	r25, r1
     e20:	c1 f7       	brne	.-16     	; 0xe12 <OWI_SearchDevices+0x24>
    unsigned char lastDeviation;
    unsigned char numFoundDevices;
    unsigned char flag = SEARCH_SUCCESSFUL;
    
    //сбрасываем адреса 1Wire устройств    
    for (i = 0; i < numDevices; i++)
     e22:	4f 5f       	subi	r20, 0xFF	; 255
     e24:	28 5f       	subi	r18, 0xF8	; 248
     e26:	3f 4f       	sbci	r19, 0xFF	; 255
     e28:	46 17       	cp	r20, r22
     e2a:	18 f4       	brcc	.+6      	; 0xe32 <OWI_SearchDevices+0x44>
     e2c:	80 e0       	ldi	r24, 0x00	; 0
     e2e:	90 e0       	ldi	r25, 0x00	; 0
     e30:	f0 cf       	rjmp	.-32     	; 0xe12 <OWI_SearchDevices+0x24>
            devices[i].id[j] = 0x00;
        }
    }
    
    numFoundDevices = 0;
    newID = devices[0].id;
     e32:	8e 01       	movw	r16, r28
     e34:	5c 2f       	mov	r21, r28
     e36:	4d 2f       	mov	r20, r29
     e38:	dd 24       	eor	r13, r13
     e3a:	cc 24       	eor	r12, r12
    lastDeviation = 0;
    currentID = newID;

    do  
    {
      memcpy(newID, currentID, 8);
     e3c:	d8 01       	movw	r26, r16
     e3e:	25 2f       	mov	r18, r21
     e40:	34 2f       	mov	r19, r20
     e42:	c9 01       	movw	r24, r18
     e44:	fc 01       	movw	r30, r24
     e46:	88 e0       	ldi	r24, 0x08	; 8
     e48:	01 90       	ld	r0, Z+
     e4a:	0d 92       	st	X+, r0
     e4c:	81 50       	subi	r24, 0x01	; 1
     e4e:	e1 f7       	brne	.-8      	; 0xe48 <OWI_SearchDevices+0x5a>
      if (!OWI_DetectPresence(pin)){
     e50:	89 2d       	mov	r24, r9
     e52:	94 d0       	rcall	.+296    	; 0xf7c <OWI_DetectPresence>
     e54:	88 23       	and	r24, r24
     e56:	11 f4       	brne	.+4      	; 0xe5c <OWI_SearchDevices+0x6e>
     e58:	0f ef       	ldi	r16, 0xFF	; 255
     e5a:	29 c0       	rjmp	.+82     	; 0xeae <OWI_SearchDevices+0xc0>
        return SEARCH_ERROR;        
      };
      lastDeviation = OWI_SearchRom(newID, lastDeviation, pin);
     e5c:	c8 01       	movw	r24, r16
     e5e:	6d 2d       	mov	r22, r13
     e60:	49 2d       	mov	r20, r9
     e62:	6a df       	rcall	.-300    	; 0xd38 <OWI_SearchRom>
     e64:	d8 2e       	mov	r13, r24
      currentID = newID;
      numFoundDevices++;
     e66:	c3 94       	inc	r12
      newID=devices[numFoundDevices].id;                
    } while(lastDeviation != OWI_ROM_SEARCH_FINISHED);            
     e68:	88 23       	and	r24, r24
     e6a:	69 f0       	breq	.+26     	; 0xe86 <OWI_SearchDevices+0x98>
        return SEARCH_ERROR;        
      };
      lastDeviation = OWI_SearchRom(newID, lastDeviation, pin);
      currentID = newID;
      numFoundDevices++;
      newID=devices[numFoundDevices].id;                
     e6c:	8c 2d       	mov	r24, r12
     e6e:	90 e0       	ldi	r25, 0x00	; 0
     e70:	23 e0       	ldi	r18, 0x03	; 3
     e72:	88 0f       	add	r24, r24
     e74:	99 1f       	adc	r25, r25
     e76:	2a 95       	dec	r18
     e78:	e1 f7       	brne	.-8      	; 0xe72 <OWI_SearchDevices+0x84>
     e7a:	8c 0f       	add	r24, r28
     e7c:	9d 1f       	adc	r25, r29
     e7e:	50 2f       	mov	r21, r16
     e80:	41 2f       	mov	r20, r17
     e82:	8c 01       	movw	r16, r24
     e84:	db cf       	rjmp	.-74     	; 0xe3c <OWI_SearchDevices+0x4e>
     e86:	10 e0       	ldi	r17, 0x00	; 0
     e88:	00 e0       	ldi	r16, 0x00	; 0
     e8a:	0f c0       	rjmp	.+30     	; 0xeaa <OWI_SearchDevices+0xbc>
    
    // Go through all the devices and do CRC check.
    for (i = 0; i < numFoundDevices; i++)
    {
        // If any id has a crc error, return error.
        if(OWI_CheckRomCRC(devices[i].id) != OWI_CRC_OK)
     e8c:	c7 01       	movw	r24, r14
     e8e:	bf d0       	rcall	.+382    	; 0x100e <OWI_CheckRomCRC>
     e90:	88 23       	and	r24, r24
     e92:	11 f0       	breq	.+4      	; 0xe98 <OWI_SearchDevices+0xaa>
     e94:	01 e0       	ldi	r16, 0x01	; 1
     e96:	04 c0       	rjmp	.+8      	; 0xea0 <OWI_SearchDevices+0xb2>
        {
            flag = SEARCH_CRC_ERROR;
        }
        else 
        {
           (*num)++;
     e98:	f5 01       	movw	r30, r10
     e9a:	80 81       	ld	r24, Z
     e9c:	8f 5f       	subi	r24, 0xFF	; 255
     e9e:	80 83       	st	Z, r24
      newID=devices[numFoundDevices].id;                
    } while(lastDeviation != OWI_ROM_SEARCH_FINISHED);            

    
    // Go through all the devices and do CRC check.
    for (i = 0; i < numFoundDevices; i++)
     ea0:	1f 5f       	subi	r17, 0xFF	; 255
     ea2:	88 e0       	ldi	r24, 0x08	; 8
     ea4:	90 e0       	ldi	r25, 0x00	; 0
     ea6:	e8 0e       	add	r14, r24
     ea8:	f9 1e       	adc	r15, r25
     eaa:	1c 15       	cp	r17, r12
     eac:	78 f3       	brcs	.-34     	; 0xe8c <OWI_SearchDevices+0x9e>
           (*num)++;
        }
    }
    // Else, return Successful.
    return flag;
}
     eae:	80 2f       	mov	r24, r16
     eb0:	df 91       	pop	r29
     eb2:	cf 91       	pop	r28
     eb4:	1f 91       	pop	r17
     eb6:	0f 91       	pop	r16
     eb8:	ff 90       	pop	r15
     eba:	ef 90       	pop	r14
     ebc:	df 90       	pop	r13
     ebe:	cf 90       	pop	r12
     ec0:	bf 90       	pop	r11
     ec2:	af 90       	pop	r10
     ec4:	9f 90       	pop	r9
     ec6:	08 95       	ret

00000ec8 <OWI_Init>:
 *
 *  \param  pins    A bitmask of the buses to initialize.
 */
void OWI_Init(unsigned char pins)
{
    OWI_RELEASE_BUS(pins);
     ec8:	94 b1       	in	r25, 0x04	; 4
     eca:	80 95       	com	r24
     ecc:	98 23       	and	r25, r24
     ece:	94 b9       	out	0x04, r25	; 4
     ed0:	95 b1       	in	r25, 0x05	; 5
     ed2:	98 23       	and	r25, r24
     ed4:	95 b9       	out	0x05, r25	; 5
     ed6:	81 e4       	ldi	r24, 0x41	; 65
     ed8:	97 e0       	ldi	r25, 0x07	; 7
     eda:	01 97       	sbiw	r24, 0x01	; 1
     edc:	f1 f7       	brne	.-4      	; 0xeda <OWI_Init+0x12>
    // The first rising edge can be interpreted by a slave as the end of a
    // Reset pulse. Delay for the required reset recovery time (H) to be 
    // sure that the real reset is interpreted correctly.
    __delay_cycles(OWI_DELAY_H_STD_MODE);
}
     ede:	08 95       	ret

00000ee0 <OWI_WriteBit1>:
void OWI_WriteBit1(unsigned char pins)
{
    unsigned char intState;
    
    // Disable interrupts.
    intState = __save_interrupt();
     ee0:	2f b7       	in	r18, 0x3f	; 63
    __disable_interrupt();
     ee2:	f8 94       	cli
    
    // Drive bus low and delay.
    OWI_PULL_BUS_LOW(pins);
     ee4:	94 b1       	in	r25, 0x04	; 4
     ee6:	98 2b       	or	r25, r24
     ee8:	94 b9       	out	0x04, r25	; 4
     eea:	95 b1       	in	r25, 0x05	; 5
     eec:	80 95       	com	r24
     eee:	98 23       	and	r25, r24
     ef0:	95 b9       	out	0x05, r25	; 5
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     ef2:	98 e1       	ldi	r25, 0x18	; 24
     ef4:	9a 95       	dec	r25
     ef6:	f1 f7       	brne	.-4      	; 0xef4 <OWI_WriteBit1+0x14>
    __delay_cycles(OWI_DELAY_A_STD_MODE);
    
    // Release bus and delay.
    OWI_RELEASE_BUS(pins);
     ef8:	94 b1       	in	r25, 0x04	; 4
     efa:	98 23       	and	r25, r24
     efc:	94 b9       	out	0x04, r25	; 4
     efe:	95 b1       	in	r25, 0x05	; 5
     f00:	89 23       	and	r24, r25
     f02:	85 b9       	out	0x05, r24	; 5
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     f04:	83 ef       	ldi	r24, 0xF3	; 243
     f06:	90 e0       	ldi	r25, 0x00	; 0
     f08:	01 97       	sbiw	r24, 0x01	; 1
     f0a:	f1 f7       	brne	.-4      	; 0xf08 <OWI_WriteBit1+0x28>
    __delay_cycles(OWI_DELAY_B_STD_MODE);
    
    // Restore interrupts.
    __restore_interrupt(intState);
     f0c:	2f bf       	out	0x3f, r18	; 63
}
     f0e:	08 95       	ret

00000f10 <OWI_WriteBit0>:
void OWI_WriteBit0(unsigned char pins)
{
    unsigned char intState;
    
    // Disable interrupts.
    intState = __save_interrupt();
     f10:	2f b7       	in	r18, 0x3f	; 63
    __disable_interrupt();
     f12:	f8 94       	cli
    
    // Drive bus low and delay.
    OWI_PULL_BUS_LOW(pins);
     f14:	94 b1       	in	r25, 0x04	; 4
     f16:	98 2b       	or	r25, r24
     f18:	94 b9       	out	0x04, r25	; 4
     f1a:	95 b1       	in	r25, 0x05	; 5
     f1c:	80 95       	com	r24
     f1e:	98 23       	and	r25, r24
     f20:	95 b9       	out	0x05, r25	; 5
     f22:	e4 ee       	ldi	r30, 0xE4	; 228
     f24:	f0 e0       	ldi	r31, 0x00	; 0
     f26:	31 97       	sbiw	r30, 0x01	; 1
     f28:	f1 f7       	brne	.-4      	; 0xf26 <OWI_WriteBit0+0x16>
    __delay_cycles(OWI_DELAY_C_STD_MODE);
    
    // Release bus and delay.
    OWI_RELEASE_BUS(pins);
     f2a:	94 b1       	in	r25, 0x04	; 4
     f2c:	98 23       	and	r25, r24
     f2e:	94 b9       	out	0x04, r25	; 4
     f30:	95 b1       	in	r25, 0x05	; 5
     f32:	89 23       	and	r24, r25
     f34:	85 b9       	out	0x05, r24	; 5
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     f36:	8c e2       	ldi	r24, 0x2C	; 44
     f38:	8a 95       	dec	r24
     f3a:	f1 f7       	brne	.-4      	; 0xf38 <OWI_WriteBit0+0x28>
    __delay_cycles(OWI_DELAY_D_STD_MODE);
    
    // Restore interrupts.
    __restore_interrupt(intState);
     f3c:	2f bf       	out	0x3f, r18	; 63
}
     f3e:	08 95       	ret

00000f40 <OWI_ReadBit>:
{
    unsigned char intState;
    unsigned char bitsRead;
    
    // Disable interrupts.
    intState = __save_interrupt();
     f40:	3f b7       	in	r19, 0x3f	; 63
    __disable_interrupt();
     f42:	f8 94       	cli
    
    // Drive bus low and delay.
    OWI_PULL_BUS_LOW(pins);
     f44:	94 b1       	in	r25, 0x04	; 4
     f46:	98 2b       	or	r25, r24
     f48:	94 b9       	out	0x04, r25	; 4
     f4a:	95 b1       	in	r25, 0x05	; 5
     f4c:	28 2f       	mov	r18, r24
     f4e:	20 95       	com	r18
     f50:	92 23       	and	r25, r18
     f52:	95 b9       	out	0x05, r25	; 5
     f54:	98 e1       	ldi	r25, 0x18	; 24
     f56:	9a 95       	dec	r25
     f58:	f1 f7       	brne	.-4      	; 0xf56 <OWI_ReadBit+0x16>
    __delay_cycles(OWI_DELAY_A_STD_MODE);
    
    // Release bus and delay.
    OWI_RELEASE_BUS(pins);
     f5a:	94 b1       	in	r25, 0x04	; 4
     f5c:	92 23       	and	r25, r18
     f5e:	94 b9       	out	0x04, r25	; 4
     f60:	95 b1       	in	r25, 0x05	; 5
     f62:	29 23       	and	r18, r25
     f64:	25 b9       	out	0x05, r18	; 5
     f66:	97 e2       	ldi	r25, 0x27	; 39
     f68:	9a 95       	dec	r25
     f6a:	f1 f7       	brne	.-4      	; 0xf68 <OWI_ReadBit+0x28>
    __delay_cycles(OWI_DELAY_E_STD_MODE);
    
    // Sample bus and delay.
    bitsRead = OWI_PIN & pins;
     f6c:	93 b1       	in	r25, 0x03	; 3
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     f6e:	ee ec       	ldi	r30, 0xCE	; 206
     f70:	f0 e0       	ldi	r31, 0x00	; 0
     f72:	31 97       	sbiw	r30, 0x01	; 1
     f74:	f1 f7       	brne	.-4      	; 0xf72 <OWI_ReadBit+0x32>
    __delay_cycles(OWI_DELAY_F_STD_MODE);
    
    // Restore interrupts.
    __restore_interrupt(intState);
     f76:	3f bf       	out	0x3f, r19	; 63
    
    return bitsRead;
}
     f78:	89 23       	and	r24, r25
     f7a:	08 95       	ret

00000f7c <OWI_DetectPresence>:
{
    unsigned char intState;
    unsigned char presenceDetected;
    
    // Disable interrupts.
    intState = __save_interrupt();
     f7c:	3f b7       	in	r19, 0x3f	; 63
    __disable_interrupt();
     f7e:	f8 94       	cli
    
    // Drive bus low and delay.
    OWI_PULL_BUS_LOW(pins);
     f80:	94 b1       	in	r25, 0x04	; 4
     f82:	98 2b       	or	r25, r24
     f84:	94 b9       	out	0x04, r25	; 4
     f86:	95 b1       	in	r25, 0x05	; 5
     f88:	28 2f       	mov	r18, r24
     f8a:	20 95       	com	r18
     f8c:	92 23       	and	r25, r18
     f8e:	95 b9       	out	0x05, r25	; 5
     f90:	e1 e4       	ldi	r30, 0x41	; 65
     f92:	f7 e0       	ldi	r31, 0x07	; 7
     f94:	31 97       	sbiw	r30, 0x01	; 1
     f96:	f1 f7       	brne	.-4      	; 0xf94 <OWI_DetectPresence+0x18>
    __delay_cycles(OWI_DELAY_H_STD_MODE);
    
    // Release bus and delay.
    OWI_RELEASE_BUS(pins);
     f98:	94 b1       	in	r25, 0x04	; 4
     f9a:	92 23       	and	r25, r18
     f9c:	94 b9       	out	0x04, r25	; 4
     f9e:	95 b1       	in	r25, 0x05	; 5
     fa0:	29 23       	and	r18, r25
     fa2:	25 b9       	out	0x05, r18	; 5
     fa4:	e9 e0       	ldi	r30, 0x09	; 9
     fa6:	f1 e0       	ldi	r31, 0x01	; 1
     fa8:	31 97       	sbiw	r30, 0x01	; 1
     faa:	f1 f7       	brne	.-4      	; 0xfa8 <OWI_DetectPresence+0x2c>
    __delay_cycles(OWI_DELAY_I_STD_MODE);
    
    // Sample bus to detect presence signal and delay.
    presenceDetected = ((~OWI_PIN) & pins);
     fac:	93 b1       	in	r25, 0x03	; 3
     fae:	e1 e3       	ldi	r30, 0x31	; 49
     fb0:	f6 e0       	ldi	r31, 0x06	; 6
     fb2:	31 97       	sbiw	r30, 0x01	; 1
     fb4:	f1 f7       	brne	.-4      	; 0xfb2 <OWI_DetectPresence+0x36>
    __delay_cycles(OWI_DELAY_J_STD_MODE);
    
    // Restore interrupts.
    __restore_interrupt(intState);
     fb6:	3f bf       	out	0x3f, r19	; 63
     fb8:	90 95       	com	r25
    
    return presenceDetected;
}
     fba:	89 23       	and	r24, r25
     fbc:	08 95       	ret

00000fbe <OWI_ComputeCRC8>:
 *  \note   Constantly passing the return value of this function 
 *          As the seed argument computes the CRC8 value of a
 *          longer string of data.
 */
unsigned char OWI_ComputeCRC8(unsigned char inData, unsigned char seed)
{
     fbe:	28 2f       	mov	r18, r24
     fc0:	98 e0       	ldi	r25, 0x08	; 8
        {
            seed >>= 1;
        }
        else
        {
            seed ^= 0x18;
     fc2:	38 e1       	ldi	r19, 0x18	; 24
    unsigned char temp;

    for (bitsLeft = 8; bitsLeft > 0; bitsLeft--)
    {
        temp = ((seed ^ inData) & 0x01);
        if (temp == 0)
     fc4:	86 2f       	mov	r24, r22
     fc6:	82 27       	eor	r24, r18
     fc8:	80 fd       	sbrc	r24, 0
     fca:	02 c0       	rjmp	.+4      	; 0xfd0 <OWI_ComputeCRC8+0x12>
        {
            seed >>= 1;
     fcc:	66 95       	lsr	r22
     fce:	03 c0       	rjmp	.+6      	; 0xfd6 <OWI_ComputeCRC8+0x18>
        }
        else
        {
            seed ^= 0x18;
     fd0:	63 27       	eor	r22, r19
            seed >>= 1;
     fd2:	66 95       	lsr	r22
            seed |= 0x80;
     fd4:	60 68       	ori	r22, 0x80	; 128
unsigned char OWI_ComputeCRC8(unsigned char inData, unsigned char seed)
{
    unsigned char bitsLeft;
    unsigned char temp;

    for (bitsLeft = 8; bitsLeft > 0; bitsLeft--)
     fd6:	91 50       	subi	r25, 0x01	; 1
     fd8:	11 f0       	breq	.+4      	; 0xfde <OWI_ComputeCRC8+0x20>
        {
            seed ^= 0x18;
            seed >>= 1;
            seed |= 0x80;
        }
        inData >>= 1;
     fda:	26 95       	lsr	r18
     fdc:	f3 cf       	rjmp	.-26     	; 0xfc4 <OWI_ComputeCRC8+0x6>
    }
    return seed;    
}
     fde:	86 2f       	mov	r24, r22
     fe0:	08 95       	ret

00000fe2 <OWI_ComputeCRC16>:
 *  \note   Constantly passing the return value of this function 
 *          As the seed argument computes the CRC16 value of a
 *          longer string of data.
 */
unsigned int OWI_ComputeCRC16(unsigned char inData, unsigned int seed)
{
     fe2:	28 2f       	mov	r18, r24
     fe4:	98 e0       	ldi	r25, 0x08	; 8
        {
            seed >>= 1;
        }
        else
        {
            seed ^= 0x4002;
     fe6:	42 e0       	ldi	r20, 0x02	; 2
     fe8:	50 e4       	ldi	r21, 0x40	; 64
    unsigned char temp;

    for (bitsLeft = 8; bitsLeft > 0; bitsLeft--)
    {
        temp = ((seed ^ inData) & 0x01);
        if (temp == 0)
     fea:	82 2f       	mov	r24, r18
     fec:	86 27       	eor	r24, r22
     fee:	80 fd       	sbrc	r24, 0
     ff0:	03 c0       	rjmp	.+6      	; 0xff8 <OWI_ComputeCRC16+0x16>
        {
            seed >>= 1;
     ff2:	76 95       	lsr	r23
     ff4:	67 95       	ror	r22
     ff6:	05 c0       	rjmp	.+10     	; 0x1002 <OWI_ComputeCRC16+0x20>
        }
        else
        {
            seed ^= 0x4002;
     ff8:	64 27       	eor	r22, r20
     ffa:	75 27       	eor	r23, r21
            seed >>= 1;
     ffc:	76 95       	lsr	r23
     ffe:	67 95       	ror	r22
            seed |= 0x8000;
    1000:	70 68       	ori	r23, 0x80	; 128
unsigned int OWI_ComputeCRC16(unsigned char inData, unsigned int seed)
{
    unsigned char bitsLeft;
    unsigned char temp;

    for (bitsLeft = 8; bitsLeft > 0; bitsLeft--)
    1002:	91 50       	subi	r25, 0x01	; 1
    1004:	11 f0       	breq	.+4      	; 0x100a <OWI_ComputeCRC16+0x28>
        {
            seed ^= 0x4002;
            seed >>= 1;
            seed |= 0x8000;
        }
        inData >>= 1;
    1006:	26 95       	lsr	r18
    1008:	f0 cf       	rjmp	.-32     	; 0xfea <OWI_ComputeCRC16+0x8>
    }
    return seed;    
}
    100a:	cb 01       	movw	r24, r22
    100c:	08 95       	ret

0000100e <OWI_CheckRomCRC>:
 *
 *  \retval OWI_CRC_OK      The CRC's matched.
 *  \retval OWI_CRC_ERROR   There was a discrepancy between the calculated and the stored CRC.
 */
unsigned char OWI_CheckRomCRC(unsigned char * romValue)
{
    100e:	ef 92       	push	r14
    1010:	ff 92       	push	r15
    1012:	1f 93       	push	r17
    1014:	cf 93       	push	r28
    1016:	df 93       	push	r29
    1018:	7c 01       	movw	r14, r24
    101a:	ec 01       	movw	r28, r24
    101c:	10 e0       	ldi	r17, 0x00	; 0
    101e:	60 e0       	ldi	r22, 0x00	; 0
    unsigned char i;
    unsigned char crc8 = 0;
    
    for (i = 0; i < 7; i++)
    {
        crc8 = OWI_ComputeCRC8(*romValue, crc8);
    1020:	89 91       	ld	r24, Y+
    1022:	cd df       	rcall	.-102    	; 0xfbe <OWI_ComputeCRC8>
    1024:	68 2f       	mov	r22, r24
unsigned char OWI_CheckRomCRC(unsigned char * romValue)
{
    unsigned char i;
    unsigned char crc8 = 0;
    
    for (i = 0; i < 7; i++)
    1026:	1f 5f       	subi	r17, 0xFF	; 255
    1028:	17 30       	cpi	r17, 0x07	; 7
    102a:	d1 f7       	brne	.-12     	; 0x1020 <OWI_CheckRomCRC+0x12>
    102c:	90 e0       	ldi	r25, 0x00	; 0
    102e:	f7 01       	movw	r30, r14
    1030:	87 81       	ldd	r24, Z+7	; 0x07
    1032:	68 13       	cpse	r22, r24
    1034:	91 e0       	ldi	r25, 0x01	; 1
    if (crc8 == (*romValue))
    {
        return OWI_CRC_OK;
    }
    return OWI_CRC_ERROR;
}
    1036:	89 2f       	mov	r24, r25
    1038:	df 91       	pop	r29
    103a:	cf 91       	pop	r28
    103c:	1f 91       	pop	r17
    103e:	ff 90       	pop	r15
    1040:	ef 90       	pop	r14
    1042:	08 95       	ret

00001044 <OWI_CheckScratchPadCRC>:

unsigned char OWI_CheckScratchPadCRC(unsigned char * scratchpad)
{
    1044:	ef 92       	push	r14
    1046:	ff 92       	push	r15
    1048:	1f 93       	push	r17
    104a:	cf 93       	push	r28
    104c:	df 93       	push	r29
    104e:	7c 01       	movw	r14, r24
    1050:	ec 01       	movw	r28, r24
    1052:	10 e0       	ldi	r17, 0x00	; 0
    1054:	60 e0       	ldi	r22, 0x00	; 0
    unsigned char i;
    unsigned char crc8 = 0;
    
    for (i = 0; i < 8; i++)
    {
        crc8 = OWI_ComputeCRC8(*scratchpad, crc8);
    1056:	89 91       	ld	r24, Y+
    1058:	b2 df       	rcall	.-156    	; 0xfbe <OWI_ComputeCRC8>
    105a:	68 2f       	mov	r22, r24
unsigned char OWI_CheckScratchPadCRC(unsigned char * scratchpad)
{
    unsigned char i;
    unsigned char crc8 = 0;
    
    for (i = 0; i < 8; i++)
    105c:	1f 5f       	subi	r17, 0xFF	; 255
    105e:	18 30       	cpi	r17, 0x08	; 8
    1060:	d1 f7       	brne	.-12     	; 0x1056 <OWI_CheckScratchPadCRC+0x12>
    1062:	90 e0       	ldi	r25, 0x00	; 0
    1064:	f7 01       	movw	r30, r14
    1066:	80 85       	ldd	r24, Z+8	; 0x08
    1068:	68 13       	cpse	r22, r24
    106a:	91 e0       	ldi	r25, 0x01	; 1
    if (crc8 == (*scratchpad))
    {
        return OWI_CRC_OK;
    }
    return OWI_CRC_ERROR;
    106c:	89 2f       	mov	r24, r25
    106e:	df 91       	pop	r29
    1070:	cf 91       	pop	r28
    1072:	1f 91       	pop	r17
    1074:	ff 90       	pop	r15
    1076:	ef 90       	pop	r14
    1078:	08 95       	ret

0000107a <DS18B20_GetTemparature>:
      OWI_Init(BUS);
}

WORD DS18B20_GetTemparature(BYTE val)
{
    if (val < MAX_DEVICES) return ds18b20_temperature[val];
    107a:	82 30       	cpi	r24, 0x02	; 2
    107c:	18 f0       	brcs	.+6      	; 0x1084 <DS18B20_GetTemparature+0xa>
    107e:	e0 e0       	ldi	r30, 0x00	; 0
    1080:	f0 e0       	ldi	r31, 0x00	; 0
    1082:	09 c0       	rjmp	.+18     	; 0x1096 <DS18B20_GetTemparature+0x1c>
    1084:	e8 2f       	mov	r30, r24
    1086:	f0 e0       	ldi	r31, 0x00	; 0
    1088:	ee 0f       	add	r30, r30
    108a:	ff 1f       	adc	r31, r31
    108c:	e4 51       	subi	r30, 0x14	; 20
    108e:	fd 4f       	sbci	r31, 0xFD	; 253
    1090:	01 90       	ld	r0, Z+
    1092:	f0 81       	ld	r31, Z
    1094:	e0 2d       	mov	r30, r0
    return 0;
}
    1096:	cf 01       	movw	r24, r30
    1098:	08 95       	ret

0000109a <DS18B20_ReadTemperature>:
*   Purpose :      Адресует датчик DS18B20, дает команду на преобразование температуры
*                  ждет, считывает его память - scratchpad, проверяет CRC,
*                  сохраняет значение температуры в переменной, возвращает код ошибки
*****************************************************************************/
BYTE DS18B20_ReadTemperature(BYTE bus, BYTE * id, WORD* ds18b20_temperature)
{
    109a:	af 92       	push	r10
    109c:	bf 92       	push	r11
    109e:	cf 92       	push	r12
    10a0:	df 92       	push	r13
    10a2:	ff 92       	push	r15
    10a4:	0f 93       	push	r16
    10a6:	1f 93       	push	r17
    10a8:	df 93       	push	r29
    10aa:	cf 93       	push	r28
    10ac:	cd b7       	in	r28, 0x3d	; 61
    10ae:	de b7       	in	r29, 0x3e	; 62
    10b0:	29 97       	sbiw	r28, 0x09	; 9
    10b2:	0f b6       	in	r0, 0x3f	; 63
    10b4:	f8 94       	cli
    10b6:	de bf       	out	0x3e, r29	; 62
    10b8:	0f be       	out	0x3f, r0	; 63
    10ba:	cd bf       	out	0x3d, r28	; 61
    10bc:	f8 2e       	mov	r15, r24
    10be:	8b 01       	movw	r16, r22
    10c0:	5a 01       	movw	r10, r20
    unsigned char i;

    /*подаем сигнал сброса
    команду для адресации устройства на шине
    подаем команду - запук преобразования */
    OWI_DetectPresence(bus);
    10c2:	5c df       	rcall	.-328    	; 0xf7c <OWI_DetectPresence>
    OWI_MatchRom(id, bus);
    10c4:	c8 01       	movw	r24, r16
    10c6:	6f 2d       	mov	r22, r15
    10c8:	0d de       	rcall	.-998    	; 0xce4 <OWI_MatchRom>
    OWI_SendByte(DS18B20_CONVERT_T ,bus);
    10ca:	84 e4       	ldi	r24, 0x44	; 68
    10cc:	6f 2d       	mov	r22, r15
    10ce:	f4 dd       	rcall	.-1048   	; 0xcb8 <OWI_SendByte>

    /*ждем, когда датчик завершит преобразование*/
    while (!OWI_ReadBit(bus));
    10d0:	8f 2d       	mov	r24, r15
    10d2:	36 df       	rcall	.-404    	; 0xf40 <OWI_ReadBit>
    10d4:	88 23       	and	r24, r24
    10d6:	e1 f3       	breq	.-8      	; 0x10d0 <DS18B20_ReadTemperature+0x36>
    /*подаем сигнал сброса
    команду для адресации устройства на шине
    команду - чтение внутренней памяти
    затем считываем внутреннюю память датчика в массив
    */
    OWI_DetectPresence(bus);
    10d8:	8f 2d       	mov	r24, r15
    10da:	50 df       	rcall	.-352    	; 0xf7c <OWI_DetectPresence>
    OWI_MatchRom(id, bus);
    10dc:	c8 01       	movw	r24, r16
    10de:	6f 2d       	mov	r22, r15
    10e0:	01 de       	rcall	.-1022   	; 0xce4 <OWI_MatchRom>
    OWI_SendByte(DS18B20_READ_SCRATCHPAD, bus);
    10e2:	8e eb       	ldi	r24, 0xBE	; 190
    10e4:	6f 2d       	mov	r22, r15
    10e6:	e8 dd       	rcall	.-1072   	; 0xcb8 <OWI_SendByte>
    10e8:	8e 01       	movw	r16, r28
    10ea:	0f 5f       	subi	r16, 0xFF	; 255
    10ec:	1f 4f       	sbci	r17, 0xFF	; 255
    for (i = 0; i<=8; i++){
    10ee:	9a e0       	ldi	r25, 0x0A	; 10
    10f0:	c9 2e       	mov	r12, r25
    10f2:	d1 2c       	mov	r13, r1
    10f4:	cc 0e       	add	r12, r28
    10f6:	dd 1e       	adc	r13, r29
      scratchpad[i] = OWI_ReceiveByte(bus);
    10f8:	8f 2d       	mov	r24, r15
    10fa:	cb dd       	rcall	.-1130   	; 0xc92 <OWI_ReceiveByte>
    10fc:	f8 01       	movw	r30, r16
    10fe:	81 93       	st	Z+, r24
    1100:	8f 01       	movw	r16, r30
    затем считываем внутреннюю память датчика в массив
    */
    OWI_DetectPresence(bus);
    OWI_MatchRom(id, bus);
    OWI_SendByte(DS18B20_READ_SCRATCHPAD, bus);
    for (i = 0; i<=8; i++){
    1102:	ec 15       	cp	r30, r12
    1104:	fd 05       	cpc	r31, r13
    1106:	c1 f7       	brne	.-16     	; 0x10f8 <DS18B20_ReadTemperature+0x5e>
      scratchpad[i] = OWI_ReceiveByte(bus);
    }

    if(OWI_CheckScratchPadCRC(scratchpad) != OWI_CRC_OK){
    1108:	ce 01       	movw	r24, r28
    110a:	01 96       	adiw	r24, 0x01	; 1
    110c:	9b df       	rcall	.-202    	; 0x1044 <OWI_CheckScratchPadCRC>
    110e:	88 23       	and	r24, r24
    1110:	11 f0       	breq	.+4      	; 0x1116 <DS18B20_ReadTemperature+0x7c>
    1112:	81 e0       	ldi	r24, 0x01	; 1
    1114:	0a c0       	rjmp	.+20     	; 0x112a <DS18B20_ReadTemperature+0x90>
      return READ_CRC_ERROR;
    }


    *ds18b20_temperature = MAKEWORD(scratchpad[0], scratchpad[1]);
    1116:	9a 81       	ldd	r25, Y+2	; 0x02
    1118:	80 e0       	ldi	r24, 0x00	; 0
    111a:	29 81       	ldd	r18, Y+1	; 0x01
    111c:	30 e0       	ldi	r19, 0x00	; 0
    111e:	82 2b       	or	r24, r18
    1120:	93 2b       	or	r25, r19
    1122:	f5 01       	movw	r30, r10
    1124:	91 83       	std	Z+1, r25	; 0x01
    1126:	80 83       	st	Z, r24
    1128:	80 e0       	ldi	r24, 0x00	; 0


    return READ_SUCCESSFUL;
}
    112a:	29 96       	adiw	r28, 0x09	; 9
    112c:	0f b6       	in	r0, 0x3f	; 63
    112e:	f8 94       	cli
    1130:	de bf       	out	0x3e, r29	; 62
    1132:	0f be       	out	0x3f, r0	; 63
    1134:	cd bf       	out	0x3d, r28	; 61
    1136:	cf 91       	pop	r28
    1138:	df 91       	pop	r29
    113a:	1f 91       	pop	r17
    113c:	0f 91       	pop	r16
    113e:	ff 90       	pop	r15
    1140:	df 90       	pop	r13
    1142:	cf 90       	pop	r12
    1144:	bf 90       	pop	r11
    1146:	af 90       	pop	r10
    1148:	08 95       	ret

0000114a <DS18B20_Execute>:
    -если количество заданных устройсв совпадает с
    колличеством найденных - устанавливаем флаг,
    чтобы функция поиска больше не запускалась
    */

    if (ds18b20_searchFlag == SEARCH_SENSORS){
    114a:	80 91 2e 01 	lds	r24, 0x012E
    114e:	88 23       	and	r24, r24
    1150:	a9 f4       	brne	.+42     	; 0x117c <DS18B20_Execute+0x32>
          ds18b20_num = 0;
    1152:	10 92 30 01 	sts	0x0130, r1
          ds18b20_crcFlag = OWI_SearchDevices(ds18b20_AllDevices, MAX_DEVICES, BUS, &ds18b20_num);
    1156:	80 ef       	ldi	r24, 0xF0	; 240
    1158:	92 e0       	ldi	r25, 0x02	; 2
    115a:	62 e0       	ldi	r22, 0x02	; 2
    115c:	44 e0       	ldi	r20, 0x04	; 4
    115e:	20 e3       	ldi	r18, 0x30	; 48
    1160:	31 e0       	ldi	r19, 0x01	; 1
    1162:	45 de       	rcall	.-886    	; 0xdee <OWI_SearchDevices>
    1164:	98 2f       	mov	r25, r24
    1166:	80 93 2f 01 	sts	0x012F, r24
          if ((ds18b20_num == MAX_DEVICES)&&(ds18b20_crcFlag != SEARCH_CRC_ERROR)){
    116a:	80 91 30 01 	lds	r24, 0x0130
    116e:	82 30       	cpi	r24, 0x02	; 2
    1170:	29 f4       	brne	.+10     	; 0x117c <DS18B20_Execute+0x32>
    1172:	91 30       	cpi	r25, 0x01	; 1
    1174:	19 f0       	breq	.+6      	; 0x117c <DS18B20_Execute+0x32>
             ds18b20_searchFlag = SENSORS_FOUND;
    1176:	8f ef       	ldi	r24, 0xFF	; 255
    1178:	80 93 2e 01 	sts	0x012E, r24
       если возвращена ошибка CRC, вывести строку "not"
       и сбросить флаг, чтобы функция поиска снова произвела
       опрос шины
    */

    ds18b20_crcFlag = DS18B20_ReadTemperature(BUS, ds18b20_AllDevices[0].id, &(ds18b20_temperature[0]));
    117c:	84 e0       	ldi	r24, 0x04	; 4
    117e:	60 ef       	ldi	r22, 0xF0	; 240
    1180:	72 e0       	ldi	r23, 0x02	; 2
    1182:	4c ee       	ldi	r20, 0xEC	; 236
    1184:	52 e0       	ldi	r21, 0x02	; 2
    1186:	89 df       	rcall	.-238    	; 0x109a <DS18B20_ReadTemperature>
    1188:	80 93 2f 01 	sts	0x012F, r24
    if (ds18b20_crcFlag != READ_CRC_ERROR){
    118c:	81 30       	cpi	r24, 0x01	; 1
    118e:	11 f4       	brne	.+4      	; 0x1194 <DS18B20_Execute+0x4a>
//        DS18B20_PrintTemperature(ds18b20_temperature);
    }
    else{
        ds18b20_searchFlag = SEARCH_SENSORS;
    1190:	10 92 2e 01 	sts	0x012E, r1
        и сбросить флаг, чтобы функция поиска снова произвела
        опрос шины
    */

//    LCD_Goto(7,1);
    ds18b20_crcFlag = DS18B20_ReadTemperature(BUS, ds18b20_AllDevices[1].id, &(ds18b20_temperature[1]));
    1194:	84 e0       	ldi	r24, 0x04	; 4
    1196:	68 ef       	ldi	r22, 0xF8	; 248
    1198:	72 e0       	ldi	r23, 0x02	; 2
    119a:	4e ee       	ldi	r20, 0xEE	; 238
    119c:	52 e0       	ldi	r21, 0x02	; 2
    119e:	7d df       	rcall	.-262    	; 0x109a <DS18B20_ReadTemperature>
    11a0:	80 93 2f 01 	sts	0x012F, r24
    if (ds18b20_crcFlag != READ_CRC_ERROR){
    11a4:	81 30       	cpi	r24, 0x01	; 1
    11a6:	11 f4       	brne	.+4      	; 0x11ac <DS18B20_Execute+0x62>
//        DS18B20_PrintTemperature(ds18b20_temperature);
    }
    else{
//        LCD_SendString("  not  ");
        ds18b20_searchFlag = SEARCH_SENSORS;
    11a8:	10 92 2e 01 	sts	0x012E, r1
    11ac:	08 95       	ret

000011ae <DS18B20_Init>:

BYTE DS18B20_ReadTemperature(BYTE bus, BYTE *id, WORD* ds18b20_temperature);

void DS18B20_Init()
{
      OWI_Init(BUS);
    11ae:	84 e0       	ldi	r24, 0x04	; 4
    11b0:	8b de       	rcall	.-746    	; 0xec8 <OWI_Init>
}
    11b2:	08 95       	ret

000011b4 <LOAD_Init>:
//! Счетчик тиков нагрузки 2.
WORD load2_current;

void LOAD_Init()
{
    load2_OnTick = 0;
    11b4:	10 92 09 03 	sts	0x0309, r1
    11b8:	10 92 08 03 	sts	0x0308, r1
    LOAD_1_DIRECTION_OFF;
    11bc:	28 98       	cbi	0x05, 0	; 5
}
    11be:	08 95       	ret

000011c0 <LOAD_1_On>:

void LOAD_1_On(WORD max_tick)
{
    load1_MaxTick = max_tick;
    11c0:	90 93 0b 03 	sts	0x030B, r25
    11c4:	80 93 0a 03 	sts	0x030A, r24
    LOAD_1_ON;
    11c8:	29 9a       	sbi	0x05, 1	; 5
}
    11ca:	08 95       	ret

000011cc <LOAD_1_Off>:

void LOAD_1_Off()
{
    LOAD_1_OFF;
    11cc:	29 98       	cbi	0x05, 1	; 5
}
    11ce:	08 95       	ret

000011d0 <LOAD_1_SetDirection>:

void LOAD_1_SetDirection(BYTE bReverse)
{
    if (bReverse)   LOAD_1_DIRECTION_ON;
    11d0:	88 23       	and	r24, r24
    11d2:	11 f0       	breq	.+4      	; 0x11d8 <LOAD_1_SetDirection+0x8>
    11d4:	28 9a       	sbi	0x05, 0	; 5
    11d6:	08 95       	ret
    else            LOAD_1_DIRECTION_OFF;
    11d8:	28 98       	cbi	0x05, 0	; 5
    11da:	08 95       	ret

000011dc <LOAD_1_IsOn>:
}

BYTE LOAD_1_IsOn()
{
    return LOAD_1_STATUS;
    11dc:	85 b1       	in	r24, 0x05	; 5
}
    11de:	82 70       	andi	r24, 0x02	; 2
    11e0:	08 95       	ret

000011e2 <LOAD_2_On>:

void LOAD_2_On(WORD on_100mls, WORD off_100mls)
{
    load2_OnTick = on_100mls;
    11e2:	90 93 09 03 	sts	0x0309, r25
    11e6:	80 93 08 03 	sts	0x0308, r24
    load2_OffTick = off_100mls;
    11ea:	70 93 0d 03 	sts	0x030D, r23
    11ee:	60 93 0c 03 	sts	0x030C, r22

    load2_current = 0;
    11f2:	10 92 0f 03 	sts	0x030F, r1
    11f6:	10 92 0e 03 	sts	0x030E, r1
    LOAD_2_ON;
    11fa:	41 9a       	sbi	0x08, 1	; 8
}
    11fc:	08 95       	ret

000011fe <LOAD_2_Off>:

void LOAD_2_Off()
{
    load2_OnTick = 0;
    11fe:	10 92 09 03 	sts	0x0309, r1
    1202:	10 92 08 03 	sts	0x0308, r1
    LOAD_2_OFF;
    1206:	41 98       	cbi	0x08, 1	; 8
}
    1208:	08 95       	ret

0000120a <LOAD_Timer_Interrupt_100_mls>:


void LOAD_Timer_Interrupt_100_mls()
{
    if (LOAD_1_IsOn() && load1_MaxTick) if (!--load1_MaxTick)  LOAD_1_Off();
    120a:	29 9b       	sbis	0x05, 1	; 5
    120c:	0e c0       	rjmp	.+28     	; 0x122a <LOAD_Timer_Interrupt_100_mls+0x20>
    120e:	80 91 0a 03 	lds	r24, 0x030A
    1212:	90 91 0b 03 	lds	r25, 0x030B
    1216:	00 97       	sbiw	r24, 0x00	; 0
    1218:	41 f0       	breq	.+16     	; 0x122a <LOAD_Timer_Interrupt_100_mls+0x20>
    121a:	01 97       	sbiw	r24, 0x01	; 1
    121c:	90 93 0b 03 	sts	0x030B, r25
    1220:	80 93 0a 03 	sts	0x030A, r24
    1224:	89 2b       	or	r24, r25
    1226:	09 f4       	brne	.+2      	; 0x122a <LOAD_Timer_Interrupt_100_mls+0x20>
    LOAD_1_ON;
}

void LOAD_1_Off()
{
    LOAD_1_OFF;
    1228:	29 98       	cbi	0x05, 1	; 5

void LOAD_Timer_Interrupt_100_mls()
{
    if (LOAD_1_IsOn() && load1_MaxTick) if (!--load1_MaxTick)  LOAD_1_Off();

    if (load2_OnTick) {
    122a:	80 91 08 03 	lds	r24, 0x0308
    122e:	90 91 09 03 	lds	r25, 0x0309
    1232:	00 97       	sbiw	r24, 0x00	; 0
    1234:	39 f1       	breq	.+78     	; 0x1284 <LOAD_Timer_Interrupt_100_mls+0x7a>
        // ШИМ нагрузки 2 активирован
        load2_current++;
    1236:	20 91 0e 03 	lds	r18, 0x030E
    123a:	30 91 0f 03 	lds	r19, 0x030F
    123e:	2f 5f       	subi	r18, 0xFF	; 255
    1240:	3f 4f       	sbci	r19, 0xFF	; 255
    1242:	30 93 0f 03 	sts	0x030F, r19
    1246:	20 93 0e 03 	sts	0x030E, r18
        if (LOAD_2_STATUS) {
    124a:	41 9b       	sbis	0x08, 1	; 8
    124c:	0f c0       	rjmp	.+30     	; 0x126c <LOAD_Timer_Interrupt_100_mls+0x62>
            if (load2_current >= load2_OnTick) { if (load2_OffTick) LOAD_2_OFF; load2_current = 0;}
    124e:	28 17       	cp	r18, r24
    1250:	39 07       	cpc	r19, r25
    1252:	c0 f0       	brcs	.+48     	; 0x1284 <LOAD_Timer_Interrupt_100_mls+0x7a>
    1254:	80 91 0c 03 	lds	r24, 0x030C
    1258:	90 91 0d 03 	lds	r25, 0x030D
    125c:	89 2b       	or	r24, r25
    125e:	09 f0       	breq	.+2      	; 0x1262 <LOAD_Timer_Interrupt_100_mls+0x58>
    1260:	41 98       	cbi	0x08, 1	; 8
    1262:	10 92 0f 03 	sts	0x030F, r1
    1266:	10 92 0e 03 	sts	0x030E, r1
    126a:	08 95       	ret
        } else {
            if (load2_current >= load2_OffTick) {LOAD_2_ON; load2_current = 0;}
    126c:	80 91 0c 03 	lds	r24, 0x030C
    1270:	90 91 0d 03 	lds	r25, 0x030D
    1274:	28 17       	cp	r18, r24
    1276:	39 07       	cpc	r19, r25
    1278:	28 f0       	brcs	.+10     	; 0x1284 <LOAD_Timer_Interrupt_100_mls+0x7a>
    127a:	41 9a       	sbi	0x08, 1	; 8
    127c:	10 92 0f 03 	sts	0x030F, r1
    1280:	10 92 0e 03 	sts	0x030E, r1
    1284:	08 95       	ret

00001286 <sprintf>:
    1286:	ae e0       	ldi	r26, 0x0E	; 14
    1288:	b0 e0       	ldi	r27, 0x00	; 0
    128a:	e8 e4       	ldi	r30, 0x48	; 72
    128c:	f9 e0       	ldi	r31, 0x09	; 9
    128e:	98 c2       	rjmp	.+1328   	; 0x17c0 <__prologue_saves__+0x1c>
    1290:	0d 89       	ldd	r16, Y+21	; 0x15
    1292:	1e 89       	ldd	r17, Y+22	; 0x16
    1294:	86 e0       	ldi	r24, 0x06	; 6
    1296:	8c 83       	std	Y+4, r24	; 0x04
    1298:	1a 83       	std	Y+2, r17	; 0x02
    129a:	09 83       	std	Y+1, r16	; 0x01
    129c:	8f ef       	ldi	r24, 0xFF	; 255
    129e:	9f e7       	ldi	r25, 0x7F	; 127
    12a0:	9e 83       	std	Y+6, r25	; 0x06
    12a2:	8d 83       	std	Y+5, r24	; 0x05
    12a4:	9e 01       	movw	r18, r28
    12a6:	27 5e       	subi	r18, 0xE7	; 231
    12a8:	3f 4f       	sbci	r19, 0xFF	; 255
    12aa:	ce 01       	movw	r24, r28
    12ac:	01 96       	adiw	r24, 0x01	; 1
    12ae:	6f 89       	ldd	r22, Y+23	; 0x17
    12b0:	78 8d       	ldd	r23, Y+24	; 0x18
    12b2:	a9 01       	movw	r20, r18
    12b4:	09 d0       	rcall	.+18     	; 0x12c8 <vfprintf>
    12b6:	2f 81       	ldd	r18, Y+7	; 0x07
    12b8:	38 85       	ldd	r19, Y+8	; 0x08
    12ba:	02 0f       	add	r16, r18
    12bc:	13 1f       	adc	r17, r19
    12be:	f8 01       	movw	r30, r16
    12c0:	10 82       	st	Z, r1
    12c2:	2e 96       	adiw	r28, 0x0e	; 14
    12c4:	e4 e0       	ldi	r30, 0x04	; 4
    12c6:	98 c2       	rjmp	.+1328   	; 0x17f8 <__epilogue_restores__+0x1c>

000012c8 <vfprintf>:
    12c8:	ab e0       	ldi	r26, 0x0B	; 11
    12ca:	b0 e0       	ldi	r27, 0x00	; 0
    12cc:	e9 e6       	ldi	r30, 0x69	; 105
    12ce:	f9 e0       	ldi	r31, 0x09	; 9
    12d0:	69 c2       	rjmp	.+1234   	; 0x17a4 <__prologue_saves__>
    12d2:	3c 01       	movw	r6, r24
    12d4:	2b 01       	movw	r4, r22
    12d6:	5a 01       	movw	r10, r20
    12d8:	fc 01       	movw	r30, r24
    12da:	17 82       	std	Z+7, r1	; 0x07
    12dc:	16 82       	std	Z+6, r1	; 0x06
    12de:	83 81       	ldd	r24, Z+3	; 0x03
    12e0:	81 fd       	sbrc	r24, 1
    12e2:	03 c0       	rjmp	.+6      	; 0x12ea <vfprintf+0x22>
    12e4:	6f ef       	ldi	r22, 0xFF	; 255
    12e6:	7f ef       	ldi	r23, 0xFF	; 255
    12e8:	b9 c1       	rjmp	.+882    	; 0x165c <vfprintf+0x394>
    12ea:	9a e0       	ldi	r25, 0x0A	; 10
    12ec:	89 2e       	mov	r8, r25
    12ee:	1e 01       	movw	r2, r28
    12f0:	08 94       	sec
    12f2:	21 1c       	adc	r2, r1
    12f4:	31 1c       	adc	r3, r1
    12f6:	f3 01       	movw	r30, r6
    12f8:	23 81       	ldd	r18, Z+3	; 0x03
    12fa:	f2 01       	movw	r30, r4
    12fc:	23 fd       	sbrc	r18, 3
    12fe:	85 91       	lpm	r24, Z+
    1300:	23 ff       	sbrs	r18, 3
    1302:	81 91       	ld	r24, Z+
    1304:	2f 01       	movw	r4, r30
    1306:	88 23       	and	r24, r24
    1308:	09 f4       	brne	.+2      	; 0x130c <vfprintf+0x44>
    130a:	a5 c1       	rjmp	.+842    	; 0x1656 <vfprintf+0x38e>
    130c:	85 32       	cpi	r24, 0x25	; 37
    130e:	39 f4       	brne	.+14     	; 0x131e <vfprintf+0x56>
    1310:	23 fd       	sbrc	r18, 3
    1312:	85 91       	lpm	r24, Z+
    1314:	23 ff       	sbrs	r18, 3
    1316:	81 91       	ld	r24, Z+
    1318:	2f 01       	movw	r4, r30
    131a:	85 32       	cpi	r24, 0x25	; 37
    131c:	21 f4       	brne	.+8      	; 0x1326 <vfprintf+0x5e>
    131e:	90 e0       	ldi	r25, 0x00	; 0
    1320:	b3 01       	movw	r22, r6
    1322:	b6 d1       	rcall	.+876    	; 0x1690 <fputc>
    1324:	e8 cf       	rjmp	.-48     	; 0x12f6 <vfprintf+0x2e>
    1326:	98 2f       	mov	r25, r24
    1328:	ff 24       	eor	r15, r15
    132a:	ee 24       	eor	r14, r14
    132c:	99 24       	eor	r9, r9
    132e:	ff e1       	ldi	r31, 0x1F	; 31
    1330:	ff 15       	cp	r31, r15
    1332:	d0 f0       	brcs	.+52     	; 0x1368 <vfprintf+0xa0>
    1334:	9b 32       	cpi	r25, 0x2B	; 43
    1336:	69 f0       	breq	.+26     	; 0x1352 <vfprintf+0x8a>
    1338:	9c 32       	cpi	r25, 0x2C	; 44
    133a:	28 f4       	brcc	.+10     	; 0x1346 <vfprintf+0x7e>
    133c:	90 32       	cpi	r25, 0x20	; 32
    133e:	59 f0       	breq	.+22     	; 0x1356 <vfprintf+0x8e>
    1340:	93 32       	cpi	r25, 0x23	; 35
    1342:	91 f4       	brne	.+36     	; 0x1368 <vfprintf+0xa0>
    1344:	0e c0       	rjmp	.+28     	; 0x1362 <vfprintf+0x9a>
    1346:	9d 32       	cpi	r25, 0x2D	; 45
    1348:	49 f0       	breq	.+18     	; 0x135c <vfprintf+0x94>
    134a:	90 33       	cpi	r25, 0x30	; 48
    134c:	69 f4       	brne	.+26     	; 0x1368 <vfprintf+0xa0>
    134e:	41 e0       	ldi	r20, 0x01	; 1
    1350:	24 c0       	rjmp	.+72     	; 0x139a <vfprintf+0xd2>
    1352:	52 e0       	ldi	r21, 0x02	; 2
    1354:	f5 2a       	or	r15, r21
    1356:	84 e0       	ldi	r24, 0x04	; 4
    1358:	f8 2a       	or	r15, r24
    135a:	28 c0       	rjmp	.+80     	; 0x13ac <vfprintf+0xe4>
    135c:	98 e0       	ldi	r25, 0x08	; 8
    135e:	f9 2a       	or	r15, r25
    1360:	25 c0       	rjmp	.+74     	; 0x13ac <vfprintf+0xe4>
    1362:	e0 e1       	ldi	r30, 0x10	; 16
    1364:	fe 2a       	or	r15, r30
    1366:	22 c0       	rjmp	.+68     	; 0x13ac <vfprintf+0xe4>
    1368:	f7 fc       	sbrc	r15, 7
    136a:	29 c0       	rjmp	.+82     	; 0x13be <vfprintf+0xf6>
    136c:	89 2f       	mov	r24, r25
    136e:	80 53       	subi	r24, 0x30	; 48
    1370:	8a 30       	cpi	r24, 0x0A	; 10
    1372:	70 f4       	brcc	.+28     	; 0x1390 <vfprintf+0xc8>
    1374:	f6 fe       	sbrs	r15, 6
    1376:	05 c0       	rjmp	.+10     	; 0x1382 <vfprintf+0xba>
    1378:	98 9c       	mul	r9, r8
    137a:	90 2c       	mov	r9, r0
    137c:	11 24       	eor	r1, r1
    137e:	98 0e       	add	r9, r24
    1380:	15 c0       	rjmp	.+42     	; 0x13ac <vfprintf+0xe4>
    1382:	e8 9c       	mul	r14, r8
    1384:	e0 2c       	mov	r14, r0
    1386:	11 24       	eor	r1, r1
    1388:	e8 0e       	add	r14, r24
    138a:	f0 e2       	ldi	r31, 0x20	; 32
    138c:	ff 2a       	or	r15, r31
    138e:	0e c0       	rjmp	.+28     	; 0x13ac <vfprintf+0xe4>
    1390:	9e 32       	cpi	r25, 0x2E	; 46
    1392:	29 f4       	brne	.+10     	; 0x139e <vfprintf+0xd6>
    1394:	f6 fc       	sbrc	r15, 6
    1396:	5f c1       	rjmp	.+702    	; 0x1656 <vfprintf+0x38e>
    1398:	40 e4       	ldi	r20, 0x40	; 64
    139a:	f4 2a       	or	r15, r20
    139c:	07 c0       	rjmp	.+14     	; 0x13ac <vfprintf+0xe4>
    139e:	9c 36       	cpi	r25, 0x6C	; 108
    13a0:	19 f4       	brne	.+6      	; 0x13a8 <vfprintf+0xe0>
    13a2:	50 e8       	ldi	r21, 0x80	; 128
    13a4:	f5 2a       	or	r15, r21
    13a6:	02 c0       	rjmp	.+4      	; 0x13ac <vfprintf+0xe4>
    13a8:	98 36       	cpi	r25, 0x68	; 104
    13aa:	49 f4       	brne	.+18     	; 0x13be <vfprintf+0xf6>
    13ac:	f2 01       	movw	r30, r4
    13ae:	23 fd       	sbrc	r18, 3
    13b0:	95 91       	lpm	r25, Z+
    13b2:	23 ff       	sbrs	r18, 3
    13b4:	91 91       	ld	r25, Z+
    13b6:	2f 01       	movw	r4, r30
    13b8:	99 23       	and	r25, r25
    13ba:	09 f0       	breq	.+2      	; 0x13be <vfprintf+0xf6>
    13bc:	b8 cf       	rjmp	.-144    	; 0x132e <vfprintf+0x66>
    13be:	89 2f       	mov	r24, r25
    13c0:	85 54       	subi	r24, 0x45	; 69
    13c2:	83 30       	cpi	r24, 0x03	; 3
    13c4:	18 f0       	brcs	.+6      	; 0x13cc <vfprintf+0x104>
    13c6:	80 52       	subi	r24, 0x20	; 32
    13c8:	83 30       	cpi	r24, 0x03	; 3
    13ca:	38 f4       	brcc	.+14     	; 0x13da <vfprintf+0x112>
    13cc:	44 e0       	ldi	r20, 0x04	; 4
    13ce:	50 e0       	ldi	r21, 0x00	; 0
    13d0:	a4 0e       	add	r10, r20
    13d2:	b5 1e       	adc	r11, r21
    13d4:	5f e3       	ldi	r21, 0x3F	; 63
    13d6:	59 83       	std	Y+1, r21	; 0x01
    13d8:	0f c0       	rjmp	.+30     	; 0x13f8 <vfprintf+0x130>
    13da:	93 36       	cpi	r25, 0x63	; 99
    13dc:	31 f0       	breq	.+12     	; 0x13ea <vfprintf+0x122>
    13de:	93 37       	cpi	r25, 0x73	; 115
    13e0:	79 f0       	breq	.+30     	; 0x1400 <vfprintf+0x138>
    13e2:	93 35       	cpi	r25, 0x53	; 83
    13e4:	09 f0       	breq	.+2      	; 0x13e8 <vfprintf+0x120>
    13e6:	52 c0       	rjmp	.+164    	; 0x148c <vfprintf+0x1c4>
    13e8:	1f c0       	rjmp	.+62     	; 0x1428 <vfprintf+0x160>
    13ea:	f5 01       	movw	r30, r10
    13ec:	80 81       	ld	r24, Z
    13ee:	89 83       	std	Y+1, r24	; 0x01
    13f0:	42 e0       	ldi	r20, 0x02	; 2
    13f2:	50 e0       	ldi	r21, 0x00	; 0
    13f4:	a4 0e       	add	r10, r20
    13f6:	b5 1e       	adc	r11, r21
    13f8:	61 01       	movw	r12, r2
    13fa:	01 e0       	ldi	r16, 0x01	; 1
    13fc:	10 e0       	ldi	r17, 0x00	; 0
    13fe:	11 c0       	rjmp	.+34     	; 0x1422 <vfprintf+0x15a>
    1400:	f5 01       	movw	r30, r10
    1402:	c0 80       	ld	r12, Z
    1404:	d1 80       	ldd	r13, Z+1	; 0x01
    1406:	f6 fc       	sbrc	r15, 6
    1408:	03 c0       	rjmp	.+6      	; 0x1410 <vfprintf+0x148>
    140a:	6f ef       	ldi	r22, 0xFF	; 255
    140c:	7f ef       	ldi	r23, 0xFF	; 255
    140e:	02 c0       	rjmp	.+4      	; 0x1414 <vfprintf+0x14c>
    1410:	69 2d       	mov	r22, r9
    1412:	70 e0       	ldi	r23, 0x00	; 0
    1414:	42 e0       	ldi	r20, 0x02	; 2
    1416:	50 e0       	ldi	r21, 0x00	; 0
    1418:	a4 0e       	add	r10, r20
    141a:	b5 1e       	adc	r11, r21
    141c:	c6 01       	movw	r24, r12
    141e:	2d d1       	rcall	.+602    	; 0x167a <strnlen>
    1420:	8c 01       	movw	r16, r24
    1422:	5f e7       	ldi	r21, 0x7F	; 127
    1424:	f5 22       	and	r15, r21
    1426:	13 c0       	rjmp	.+38     	; 0x144e <vfprintf+0x186>
    1428:	f5 01       	movw	r30, r10
    142a:	c0 80       	ld	r12, Z
    142c:	d1 80       	ldd	r13, Z+1	; 0x01
    142e:	f6 fc       	sbrc	r15, 6
    1430:	03 c0       	rjmp	.+6      	; 0x1438 <vfprintf+0x170>
    1432:	6f ef       	ldi	r22, 0xFF	; 255
    1434:	7f ef       	ldi	r23, 0xFF	; 255
    1436:	02 c0       	rjmp	.+4      	; 0x143c <vfprintf+0x174>
    1438:	69 2d       	mov	r22, r9
    143a:	70 e0       	ldi	r23, 0x00	; 0
    143c:	42 e0       	ldi	r20, 0x02	; 2
    143e:	50 e0       	ldi	r21, 0x00	; 0
    1440:	a4 0e       	add	r10, r20
    1442:	b5 1e       	adc	r11, r21
    1444:	c6 01       	movw	r24, r12
    1446:	0e d1       	rcall	.+540    	; 0x1664 <strnlen_P>
    1448:	8c 01       	movw	r16, r24
    144a:	50 e8       	ldi	r21, 0x80	; 128
    144c:	f5 2a       	or	r15, r21
    144e:	f3 fe       	sbrs	r15, 3
    1450:	06 c0       	rjmp	.+12     	; 0x145e <vfprintf+0x196>
    1452:	18 c0       	rjmp	.+48     	; 0x1484 <vfprintf+0x1bc>
    1454:	80 e2       	ldi	r24, 0x20	; 32
    1456:	90 e0       	ldi	r25, 0x00	; 0
    1458:	b3 01       	movw	r22, r6
    145a:	1a d1       	rcall	.+564    	; 0x1690 <fputc>
    145c:	ea 94       	dec	r14
    145e:	8e 2d       	mov	r24, r14
    1460:	90 e0       	ldi	r25, 0x00	; 0
    1462:	08 17       	cp	r16, r24
    1464:	19 07       	cpc	r17, r25
    1466:	b0 f3       	brcs	.-20     	; 0x1454 <vfprintf+0x18c>
    1468:	0d c0       	rjmp	.+26     	; 0x1484 <vfprintf+0x1bc>
    146a:	f6 01       	movw	r30, r12
    146c:	f7 fc       	sbrc	r15, 7
    146e:	85 91       	lpm	r24, Z+
    1470:	f7 fe       	sbrs	r15, 7
    1472:	81 91       	ld	r24, Z+
    1474:	6f 01       	movw	r12, r30
    1476:	90 e0       	ldi	r25, 0x00	; 0
    1478:	b3 01       	movw	r22, r6
    147a:	0a d1       	rcall	.+532    	; 0x1690 <fputc>
    147c:	e1 10       	cpse	r14, r1
    147e:	ea 94       	dec	r14
    1480:	01 50       	subi	r16, 0x01	; 1
    1482:	10 40       	sbci	r17, 0x00	; 0
    1484:	01 15       	cp	r16, r1
    1486:	11 05       	cpc	r17, r1
    1488:	81 f7       	brne	.-32     	; 0x146a <vfprintf+0x1a2>
    148a:	e2 c0       	rjmp	.+452    	; 0x1650 <vfprintf+0x388>
    148c:	94 36       	cpi	r25, 0x64	; 100
    148e:	11 f0       	breq	.+4      	; 0x1494 <vfprintf+0x1cc>
    1490:	99 36       	cpi	r25, 0x69	; 105
    1492:	61 f5       	brne	.+88     	; 0x14ec <vfprintf+0x224>
    1494:	f7 fe       	sbrs	r15, 7
    1496:	08 c0       	rjmp	.+16     	; 0x14a8 <vfprintf+0x1e0>
    1498:	f5 01       	movw	r30, r10
    149a:	20 81       	ld	r18, Z
    149c:	31 81       	ldd	r19, Z+1	; 0x01
    149e:	42 81       	ldd	r20, Z+2	; 0x02
    14a0:	53 81       	ldd	r21, Z+3	; 0x03
    14a2:	84 e0       	ldi	r24, 0x04	; 4
    14a4:	90 e0       	ldi	r25, 0x00	; 0
    14a6:	0a c0       	rjmp	.+20     	; 0x14bc <vfprintf+0x1f4>
    14a8:	f5 01       	movw	r30, r10
    14aa:	80 81       	ld	r24, Z
    14ac:	91 81       	ldd	r25, Z+1	; 0x01
    14ae:	9c 01       	movw	r18, r24
    14b0:	44 27       	eor	r20, r20
    14b2:	37 fd       	sbrc	r19, 7
    14b4:	40 95       	com	r20
    14b6:	54 2f       	mov	r21, r20
    14b8:	82 e0       	ldi	r24, 0x02	; 2
    14ba:	90 e0       	ldi	r25, 0x00	; 0
    14bc:	a8 0e       	add	r10, r24
    14be:	b9 1e       	adc	r11, r25
    14c0:	9f e6       	ldi	r25, 0x6F	; 111
    14c2:	f9 22       	and	r15, r25
    14c4:	57 ff       	sbrs	r21, 7
    14c6:	09 c0       	rjmp	.+18     	; 0x14da <vfprintf+0x212>
    14c8:	50 95       	com	r21
    14ca:	40 95       	com	r20
    14cc:	30 95       	com	r19
    14ce:	21 95       	neg	r18
    14d0:	3f 4f       	sbci	r19, 0xFF	; 255
    14d2:	4f 4f       	sbci	r20, 0xFF	; 255
    14d4:	5f 4f       	sbci	r21, 0xFF	; 255
    14d6:	e0 e8       	ldi	r30, 0x80	; 128
    14d8:	fe 2a       	or	r15, r30
    14da:	ca 01       	movw	r24, r20
    14dc:	b9 01       	movw	r22, r18
    14de:	a1 01       	movw	r20, r2
    14e0:	2a e0       	ldi	r18, 0x0A	; 10
    14e2:	30 e0       	ldi	r19, 0x00	; 0
    14e4:	01 d1       	rcall	.+514    	; 0x16e8 <__ultoa_invert>
    14e6:	d8 2e       	mov	r13, r24
    14e8:	d2 18       	sub	r13, r2
    14ea:	3f c0       	rjmp	.+126    	; 0x156a <vfprintf+0x2a2>
    14ec:	95 37       	cpi	r25, 0x75	; 117
    14ee:	29 f4       	brne	.+10     	; 0x14fa <vfprintf+0x232>
    14f0:	1f 2d       	mov	r17, r15
    14f2:	1f 7e       	andi	r17, 0xEF	; 239
    14f4:	2a e0       	ldi	r18, 0x0A	; 10
    14f6:	30 e0       	ldi	r19, 0x00	; 0
    14f8:	1d c0       	rjmp	.+58     	; 0x1534 <vfprintf+0x26c>
    14fa:	1f 2d       	mov	r17, r15
    14fc:	19 7f       	andi	r17, 0xF9	; 249
    14fe:	9f 36       	cpi	r25, 0x6F	; 111
    1500:	61 f0       	breq	.+24     	; 0x151a <vfprintf+0x252>
    1502:	90 37       	cpi	r25, 0x70	; 112
    1504:	20 f4       	brcc	.+8      	; 0x150e <vfprintf+0x246>
    1506:	98 35       	cpi	r25, 0x58	; 88
    1508:	09 f0       	breq	.+2      	; 0x150c <vfprintf+0x244>
    150a:	a5 c0       	rjmp	.+330    	; 0x1656 <vfprintf+0x38e>
    150c:	0f c0       	rjmp	.+30     	; 0x152c <vfprintf+0x264>
    150e:	90 37       	cpi	r25, 0x70	; 112
    1510:	39 f0       	breq	.+14     	; 0x1520 <vfprintf+0x258>
    1512:	98 37       	cpi	r25, 0x78	; 120
    1514:	09 f0       	breq	.+2      	; 0x1518 <vfprintf+0x250>
    1516:	9f c0       	rjmp	.+318    	; 0x1656 <vfprintf+0x38e>
    1518:	04 c0       	rjmp	.+8      	; 0x1522 <vfprintf+0x25a>
    151a:	28 e0       	ldi	r18, 0x08	; 8
    151c:	30 e0       	ldi	r19, 0x00	; 0
    151e:	0a c0       	rjmp	.+20     	; 0x1534 <vfprintf+0x26c>
    1520:	10 61       	ori	r17, 0x10	; 16
    1522:	14 fd       	sbrc	r17, 4
    1524:	14 60       	ori	r17, 0x04	; 4
    1526:	20 e1       	ldi	r18, 0x10	; 16
    1528:	30 e0       	ldi	r19, 0x00	; 0
    152a:	04 c0       	rjmp	.+8      	; 0x1534 <vfprintf+0x26c>
    152c:	14 fd       	sbrc	r17, 4
    152e:	16 60       	ori	r17, 0x06	; 6
    1530:	20 e1       	ldi	r18, 0x10	; 16
    1532:	32 e0       	ldi	r19, 0x02	; 2
    1534:	17 ff       	sbrs	r17, 7
    1536:	08 c0       	rjmp	.+16     	; 0x1548 <vfprintf+0x280>
    1538:	f5 01       	movw	r30, r10
    153a:	60 81       	ld	r22, Z
    153c:	71 81       	ldd	r23, Z+1	; 0x01
    153e:	82 81       	ldd	r24, Z+2	; 0x02
    1540:	93 81       	ldd	r25, Z+3	; 0x03
    1542:	44 e0       	ldi	r20, 0x04	; 4
    1544:	50 e0       	ldi	r21, 0x00	; 0
    1546:	08 c0       	rjmp	.+16     	; 0x1558 <vfprintf+0x290>
    1548:	f5 01       	movw	r30, r10
    154a:	80 81       	ld	r24, Z
    154c:	91 81       	ldd	r25, Z+1	; 0x01
    154e:	bc 01       	movw	r22, r24
    1550:	80 e0       	ldi	r24, 0x00	; 0
    1552:	90 e0       	ldi	r25, 0x00	; 0
    1554:	42 e0       	ldi	r20, 0x02	; 2
    1556:	50 e0       	ldi	r21, 0x00	; 0
    1558:	a4 0e       	add	r10, r20
    155a:	b5 1e       	adc	r11, r21
    155c:	a1 01       	movw	r20, r2
    155e:	c4 d0       	rcall	.+392    	; 0x16e8 <__ultoa_invert>
    1560:	d8 2e       	mov	r13, r24
    1562:	d2 18       	sub	r13, r2
    1564:	8f e7       	ldi	r24, 0x7F	; 127
    1566:	f8 2e       	mov	r15, r24
    1568:	f1 22       	and	r15, r17
    156a:	f6 fe       	sbrs	r15, 6
    156c:	0b c0       	rjmp	.+22     	; 0x1584 <vfprintf+0x2bc>
    156e:	5e ef       	ldi	r21, 0xFE	; 254
    1570:	f5 22       	and	r15, r21
    1572:	d9 14       	cp	r13, r9
    1574:	38 f4       	brcc	.+14     	; 0x1584 <vfprintf+0x2bc>
    1576:	f4 fe       	sbrs	r15, 4
    1578:	07 c0       	rjmp	.+14     	; 0x1588 <vfprintf+0x2c0>
    157a:	f2 fc       	sbrc	r15, 2
    157c:	05 c0       	rjmp	.+10     	; 0x1588 <vfprintf+0x2c0>
    157e:	8f ee       	ldi	r24, 0xEF	; 239
    1580:	f8 22       	and	r15, r24
    1582:	02 c0       	rjmp	.+4      	; 0x1588 <vfprintf+0x2c0>
    1584:	1d 2d       	mov	r17, r13
    1586:	01 c0       	rjmp	.+2      	; 0x158a <vfprintf+0x2c2>
    1588:	19 2d       	mov	r17, r9
    158a:	f4 fe       	sbrs	r15, 4
    158c:	0d c0       	rjmp	.+26     	; 0x15a8 <vfprintf+0x2e0>
    158e:	fe 01       	movw	r30, r28
    1590:	ed 0d       	add	r30, r13
    1592:	f1 1d       	adc	r31, r1
    1594:	80 81       	ld	r24, Z
    1596:	80 33       	cpi	r24, 0x30	; 48
    1598:	19 f4       	brne	.+6      	; 0x15a0 <vfprintf+0x2d8>
    159a:	99 ee       	ldi	r25, 0xE9	; 233
    159c:	f9 22       	and	r15, r25
    159e:	08 c0       	rjmp	.+16     	; 0x15b0 <vfprintf+0x2e8>
    15a0:	1f 5f       	subi	r17, 0xFF	; 255
    15a2:	f2 fe       	sbrs	r15, 2
    15a4:	05 c0       	rjmp	.+10     	; 0x15b0 <vfprintf+0x2e8>
    15a6:	03 c0       	rjmp	.+6      	; 0x15ae <vfprintf+0x2e6>
    15a8:	8f 2d       	mov	r24, r15
    15aa:	86 78       	andi	r24, 0x86	; 134
    15ac:	09 f0       	breq	.+2      	; 0x15b0 <vfprintf+0x2e8>
    15ae:	1f 5f       	subi	r17, 0xFF	; 255
    15b0:	0f 2d       	mov	r16, r15
    15b2:	f3 fc       	sbrc	r15, 3
    15b4:	13 c0       	rjmp	.+38     	; 0x15dc <vfprintf+0x314>
    15b6:	f0 fe       	sbrs	r15, 0
    15b8:	0e c0       	rjmp	.+28     	; 0x15d6 <vfprintf+0x30e>
    15ba:	1e 15       	cp	r17, r14
    15bc:	10 f0       	brcs	.+4      	; 0x15c2 <vfprintf+0x2fa>
    15be:	9d 2c       	mov	r9, r13
    15c0:	0a c0       	rjmp	.+20     	; 0x15d6 <vfprintf+0x30e>
    15c2:	9d 2c       	mov	r9, r13
    15c4:	9e 0c       	add	r9, r14
    15c6:	91 1a       	sub	r9, r17
    15c8:	1e 2d       	mov	r17, r14
    15ca:	05 c0       	rjmp	.+10     	; 0x15d6 <vfprintf+0x30e>
    15cc:	80 e2       	ldi	r24, 0x20	; 32
    15ce:	90 e0       	ldi	r25, 0x00	; 0
    15d0:	b3 01       	movw	r22, r6
    15d2:	5e d0       	rcall	.+188    	; 0x1690 <fputc>
    15d4:	1f 5f       	subi	r17, 0xFF	; 255
    15d6:	1e 15       	cp	r17, r14
    15d8:	c8 f3       	brcs	.-14     	; 0x15cc <vfprintf+0x304>
    15da:	04 c0       	rjmp	.+8      	; 0x15e4 <vfprintf+0x31c>
    15dc:	1e 15       	cp	r17, r14
    15de:	10 f4       	brcc	.+4      	; 0x15e4 <vfprintf+0x31c>
    15e0:	e1 1a       	sub	r14, r17
    15e2:	01 c0       	rjmp	.+2      	; 0x15e6 <vfprintf+0x31e>
    15e4:	ee 24       	eor	r14, r14
    15e6:	04 ff       	sbrs	r16, 4
    15e8:	0e c0       	rjmp	.+28     	; 0x1606 <vfprintf+0x33e>
    15ea:	80 e3       	ldi	r24, 0x30	; 48
    15ec:	90 e0       	ldi	r25, 0x00	; 0
    15ee:	b3 01       	movw	r22, r6
    15f0:	4f d0       	rcall	.+158    	; 0x1690 <fputc>
    15f2:	02 ff       	sbrs	r16, 2
    15f4:	1b c0       	rjmp	.+54     	; 0x162c <vfprintf+0x364>
    15f6:	01 fd       	sbrc	r16, 1
    15f8:	03 c0       	rjmp	.+6      	; 0x1600 <vfprintf+0x338>
    15fa:	88 e7       	ldi	r24, 0x78	; 120
    15fc:	90 e0       	ldi	r25, 0x00	; 0
    15fe:	0e c0       	rjmp	.+28     	; 0x161c <vfprintf+0x354>
    1600:	88 e5       	ldi	r24, 0x58	; 88
    1602:	90 e0       	ldi	r25, 0x00	; 0
    1604:	0b c0       	rjmp	.+22     	; 0x161c <vfprintf+0x354>
    1606:	80 2f       	mov	r24, r16
    1608:	86 78       	andi	r24, 0x86	; 134
    160a:	81 f0       	breq	.+32     	; 0x162c <vfprintf+0x364>
    160c:	01 ff       	sbrs	r16, 1
    160e:	02 c0       	rjmp	.+4      	; 0x1614 <vfprintf+0x34c>
    1610:	8b e2       	ldi	r24, 0x2B	; 43
    1612:	01 c0       	rjmp	.+2      	; 0x1616 <vfprintf+0x34e>
    1614:	80 e2       	ldi	r24, 0x20	; 32
    1616:	f7 fc       	sbrc	r15, 7
    1618:	8d e2       	ldi	r24, 0x2D	; 45
    161a:	90 e0       	ldi	r25, 0x00	; 0
    161c:	b3 01       	movw	r22, r6
    161e:	38 d0       	rcall	.+112    	; 0x1690 <fputc>
    1620:	05 c0       	rjmp	.+10     	; 0x162c <vfprintf+0x364>
    1622:	80 e3       	ldi	r24, 0x30	; 48
    1624:	90 e0       	ldi	r25, 0x00	; 0
    1626:	b3 01       	movw	r22, r6
    1628:	33 d0       	rcall	.+102    	; 0x1690 <fputc>
    162a:	9a 94       	dec	r9
    162c:	d9 14       	cp	r13, r9
    162e:	c8 f3       	brcs	.-14     	; 0x1622 <vfprintf+0x35a>
    1630:	da 94       	dec	r13
    1632:	f1 01       	movw	r30, r2
    1634:	ed 0d       	add	r30, r13
    1636:	f1 1d       	adc	r31, r1
    1638:	80 81       	ld	r24, Z
    163a:	90 e0       	ldi	r25, 0x00	; 0
    163c:	b3 01       	movw	r22, r6
    163e:	28 d0       	rcall	.+80     	; 0x1690 <fputc>
    1640:	dd 20       	and	r13, r13
    1642:	b1 f7       	brne	.-20     	; 0x1630 <vfprintf+0x368>
    1644:	05 c0       	rjmp	.+10     	; 0x1650 <vfprintf+0x388>
    1646:	80 e2       	ldi	r24, 0x20	; 32
    1648:	90 e0       	ldi	r25, 0x00	; 0
    164a:	b3 01       	movw	r22, r6
    164c:	21 d0       	rcall	.+66     	; 0x1690 <fputc>
    164e:	ea 94       	dec	r14
    1650:	ee 20       	and	r14, r14
    1652:	c9 f7       	brne	.-14     	; 0x1646 <vfprintf+0x37e>
    1654:	50 ce       	rjmp	.-864    	; 0x12f6 <vfprintf+0x2e>
    1656:	f3 01       	movw	r30, r6
    1658:	66 81       	ldd	r22, Z+6	; 0x06
    165a:	77 81       	ldd	r23, Z+7	; 0x07
    165c:	cb 01       	movw	r24, r22
    165e:	2b 96       	adiw	r28, 0x0b	; 11
    1660:	e2 e1       	ldi	r30, 0x12	; 18
    1662:	bc c0       	rjmp	.+376    	; 0x17dc <__epilogue_restores__>

00001664 <strnlen_P>:
    1664:	fc 01       	movw	r30, r24
    1666:	05 90       	lpm	r0, Z+
    1668:	61 50       	subi	r22, 0x01	; 1
    166a:	70 40       	sbci	r23, 0x00	; 0
    166c:	01 10       	cpse	r0, r1
    166e:	d8 f7       	brcc	.-10     	; 0x1666 <strnlen_P+0x2>
    1670:	80 95       	com	r24
    1672:	90 95       	com	r25
    1674:	8e 0f       	add	r24, r30
    1676:	9f 1f       	adc	r25, r31
    1678:	08 95       	ret

0000167a <strnlen>:
    167a:	fc 01       	movw	r30, r24
    167c:	61 50       	subi	r22, 0x01	; 1
    167e:	70 40       	sbci	r23, 0x00	; 0
    1680:	01 90       	ld	r0, Z+
    1682:	01 10       	cpse	r0, r1
    1684:	d8 f7       	brcc	.-10     	; 0x167c <strnlen+0x2>
    1686:	80 95       	com	r24
    1688:	90 95       	com	r25
    168a:	8e 0f       	add	r24, r30
    168c:	9f 1f       	adc	r25, r31
    168e:	08 95       	ret

00001690 <fputc>:
    1690:	0f 93       	push	r16
    1692:	1f 93       	push	r17
    1694:	cf 93       	push	r28
    1696:	df 93       	push	r29
    1698:	8c 01       	movw	r16, r24
    169a:	eb 01       	movw	r28, r22
    169c:	8b 81       	ldd	r24, Y+3	; 0x03
    169e:	81 ff       	sbrs	r24, 1
    16a0:	1b c0       	rjmp	.+54     	; 0x16d8 <fputc+0x48>
    16a2:	82 ff       	sbrs	r24, 2
    16a4:	0d c0       	rjmp	.+26     	; 0x16c0 <fputc+0x30>
    16a6:	2e 81       	ldd	r18, Y+6	; 0x06
    16a8:	3f 81       	ldd	r19, Y+7	; 0x07
    16aa:	8c 81       	ldd	r24, Y+4	; 0x04
    16ac:	9d 81       	ldd	r25, Y+5	; 0x05
    16ae:	28 17       	cp	r18, r24
    16b0:	39 07       	cpc	r19, r25
    16b2:	64 f4       	brge	.+24     	; 0x16cc <fputc+0x3c>
    16b4:	e8 81       	ld	r30, Y
    16b6:	f9 81       	ldd	r31, Y+1	; 0x01
    16b8:	01 93       	st	Z+, r16
    16ba:	f9 83       	std	Y+1, r31	; 0x01
    16bc:	e8 83       	st	Y, r30
    16be:	06 c0       	rjmp	.+12     	; 0x16cc <fputc+0x3c>
    16c0:	e8 85       	ldd	r30, Y+8	; 0x08
    16c2:	f9 85       	ldd	r31, Y+9	; 0x09
    16c4:	80 2f       	mov	r24, r16
    16c6:	09 95       	icall
    16c8:	89 2b       	or	r24, r25
    16ca:	31 f4       	brne	.+12     	; 0x16d8 <fputc+0x48>
    16cc:	8e 81       	ldd	r24, Y+6	; 0x06
    16ce:	9f 81       	ldd	r25, Y+7	; 0x07
    16d0:	01 96       	adiw	r24, 0x01	; 1
    16d2:	9f 83       	std	Y+7, r25	; 0x07
    16d4:	8e 83       	std	Y+6, r24	; 0x06
    16d6:	02 c0       	rjmp	.+4      	; 0x16dc <fputc+0x4c>
    16d8:	0f ef       	ldi	r16, 0xFF	; 255
    16da:	1f ef       	ldi	r17, 0xFF	; 255
    16dc:	c8 01       	movw	r24, r16
    16de:	df 91       	pop	r29
    16e0:	cf 91       	pop	r28
    16e2:	1f 91       	pop	r17
    16e4:	0f 91       	pop	r16
    16e6:	08 95       	ret

000016e8 <__ultoa_invert>:
    16e8:	fa 01       	movw	r30, r20
    16ea:	aa 27       	eor	r26, r26
    16ec:	28 30       	cpi	r18, 0x08	; 8
    16ee:	51 f1       	breq	.+84     	; 0x1744 <__ultoa_invert+0x5c>
    16f0:	20 31       	cpi	r18, 0x10	; 16
    16f2:	81 f1       	breq	.+96     	; 0x1754 <__ultoa_invert+0x6c>
    16f4:	e8 94       	clt
    16f6:	6f 93       	push	r22
    16f8:	6e 7f       	andi	r22, 0xFE	; 254
    16fa:	6e 5f       	subi	r22, 0xFE	; 254
    16fc:	7f 4f       	sbci	r23, 0xFF	; 255
    16fe:	8f 4f       	sbci	r24, 0xFF	; 255
    1700:	9f 4f       	sbci	r25, 0xFF	; 255
    1702:	af 4f       	sbci	r26, 0xFF	; 255
    1704:	b1 e0       	ldi	r27, 0x01	; 1
    1706:	3e d0       	rcall	.+124    	; 0x1784 <__ultoa_invert+0x9c>
    1708:	b4 e0       	ldi	r27, 0x04	; 4
    170a:	3c d0       	rcall	.+120    	; 0x1784 <__ultoa_invert+0x9c>
    170c:	67 0f       	add	r22, r23
    170e:	78 1f       	adc	r23, r24
    1710:	89 1f       	adc	r24, r25
    1712:	9a 1f       	adc	r25, r26
    1714:	a1 1d       	adc	r26, r1
    1716:	68 0f       	add	r22, r24
    1718:	79 1f       	adc	r23, r25
    171a:	8a 1f       	adc	r24, r26
    171c:	91 1d       	adc	r25, r1
    171e:	a1 1d       	adc	r26, r1
    1720:	6a 0f       	add	r22, r26
    1722:	71 1d       	adc	r23, r1
    1724:	81 1d       	adc	r24, r1
    1726:	91 1d       	adc	r25, r1
    1728:	a1 1d       	adc	r26, r1
    172a:	20 d0       	rcall	.+64     	; 0x176c <__ultoa_invert+0x84>
    172c:	09 f4       	brne	.+2      	; 0x1730 <__ultoa_invert+0x48>
    172e:	68 94       	set
    1730:	3f 91       	pop	r19
    1732:	2a e0       	ldi	r18, 0x0A	; 10
    1734:	26 9f       	mul	r18, r22
    1736:	11 24       	eor	r1, r1
    1738:	30 19       	sub	r19, r0
    173a:	30 5d       	subi	r19, 0xD0	; 208
    173c:	31 93       	st	Z+, r19
    173e:	de f6       	brtc	.-74     	; 0x16f6 <__ultoa_invert+0xe>
    1740:	cf 01       	movw	r24, r30
    1742:	08 95       	ret
    1744:	46 2f       	mov	r20, r22
    1746:	47 70       	andi	r20, 0x07	; 7
    1748:	40 5d       	subi	r20, 0xD0	; 208
    174a:	41 93       	st	Z+, r20
    174c:	b3 e0       	ldi	r27, 0x03	; 3
    174e:	0f d0       	rcall	.+30     	; 0x176e <__ultoa_invert+0x86>
    1750:	c9 f7       	brne	.-14     	; 0x1744 <__ultoa_invert+0x5c>
    1752:	f6 cf       	rjmp	.-20     	; 0x1740 <__ultoa_invert+0x58>
    1754:	46 2f       	mov	r20, r22
    1756:	4f 70       	andi	r20, 0x0F	; 15
    1758:	40 5d       	subi	r20, 0xD0	; 208
    175a:	4a 33       	cpi	r20, 0x3A	; 58
    175c:	18 f0       	brcs	.+6      	; 0x1764 <__ultoa_invert+0x7c>
    175e:	49 5d       	subi	r20, 0xD9	; 217
    1760:	31 fd       	sbrc	r19, 1
    1762:	40 52       	subi	r20, 0x20	; 32
    1764:	41 93       	st	Z+, r20
    1766:	02 d0       	rcall	.+4      	; 0x176c <__ultoa_invert+0x84>
    1768:	a9 f7       	brne	.-22     	; 0x1754 <__ultoa_invert+0x6c>
    176a:	ea cf       	rjmp	.-44     	; 0x1740 <__ultoa_invert+0x58>
    176c:	b4 e0       	ldi	r27, 0x04	; 4
    176e:	a6 95       	lsr	r26
    1770:	97 95       	ror	r25
    1772:	87 95       	ror	r24
    1774:	77 95       	ror	r23
    1776:	67 95       	ror	r22
    1778:	ba 95       	dec	r27
    177a:	c9 f7       	brne	.-14     	; 0x176e <__ultoa_invert+0x86>
    177c:	00 97       	sbiw	r24, 0x00	; 0
    177e:	61 05       	cpc	r22, r1
    1780:	71 05       	cpc	r23, r1
    1782:	08 95       	ret
    1784:	9b 01       	movw	r18, r22
    1786:	ac 01       	movw	r20, r24
    1788:	0a 2e       	mov	r0, r26
    178a:	06 94       	lsr	r0
    178c:	57 95       	ror	r21
    178e:	47 95       	ror	r20
    1790:	37 95       	ror	r19
    1792:	27 95       	ror	r18
    1794:	ba 95       	dec	r27
    1796:	c9 f7       	brne	.-14     	; 0x178a <__ultoa_invert+0xa2>
    1798:	62 0f       	add	r22, r18
    179a:	73 1f       	adc	r23, r19
    179c:	84 1f       	adc	r24, r20
    179e:	95 1f       	adc	r25, r21
    17a0:	a0 1d       	adc	r26, r0
    17a2:	08 95       	ret

000017a4 <__prologue_saves__>:
    17a4:	2f 92       	push	r2
    17a6:	3f 92       	push	r3
    17a8:	4f 92       	push	r4
    17aa:	5f 92       	push	r5
    17ac:	6f 92       	push	r6
    17ae:	7f 92       	push	r7
    17b0:	8f 92       	push	r8
    17b2:	9f 92       	push	r9
    17b4:	af 92       	push	r10
    17b6:	bf 92       	push	r11
    17b8:	cf 92       	push	r12
    17ba:	df 92       	push	r13
    17bc:	ef 92       	push	r14
    17be:	ff 92       	push	r15
    17c0:	0f 93       	push	r16
    17c2:	1f 93       	push	r17
    17c4:	cf 93       	push	r28
    17c6:	df 93       	push	r29
    17c8:	cd b7       	in	r28, 0x3d	; 61
    17ca:	de b7       	in	r29, 0x3e	; 62
    17cc:	ca 1b       	sub	r28, r26
    17ce:	db 0b       	sbc	r29, r27
    17d0:	0f b6       	in	r0, 0x3f	; 63
    17d2:	f8 94       	cli
    17d4:	de bf       	out	0x3e, r29	; 62
    17d6:	0f be       	out	0x3f, r0	; 63
    17d8:	cd bf       	out	0x3d, r28	; 61
    17da:	09 94       	ijmp

000017dc <__epilogue_restores__>:
    17dc:	2a 88       	ldd	r2, Y+18	; 0x12
    17de:	39 88       	ldd	r3, Y+17	; 0x11
    17e0:	48 88       	ldd	r4, Y+16	; 0x10
    17e2:	5f 84       	ldd	r5, Y+15	; 0x0f
    17e4:	6e 84       	ldd	r6, Y+14	; 0x0e
    17e6:	7d 84       	ldd	r7, Y+13	; 0x0d
    17e8:	8c 84       	ldd	r8, Y+12	; 0x0c
    17ea:	9b 84       	ldd	r9, Y+11	; 0x0b
    17ec:	aa 84       	ldd	r10, Y+10	; 0x0a
    17ee:	b9 84       	ldd	r11, Y+9	; 0x09
    17f0:	c8 84       	ldd	r12, Y+8	; 0x08
    17f2:	df 80       	ldd	r13, Y+7	; 0x07
    17f4:	ee 80       	ldd	r14, Y+6	; 0x06
    17f6:	fd 80       	ldd	r15, Y+5	; 0x05
    17f8:	0c 81       	ldd	r16, Y+4	; 0x04
    17fa:	1b 81       	ldd	r17, Y+3	; 0x03
    17fc:	aa 81       	ldd	r26, Y+2	; 0x02
    17fe:	b9 81       	ldd	r27, Y+1	; 0x01
    1800:	ce 0f       	add	r28, r30
    1802:	d1 1d       	adc	r29, r1
    1804:	0f b6       	in	r0, 0x3f	; 63
    1806:	f8 94       	cli
    1808:	de bf       	out	0x3e, r29	; 62
    180a:	0f be       	out	0x3f, r0	; 63
    180c:	cd bf       	out	0x3d, r28	; 61
    180e:	ed 01       	movw	r28, r26
    1810:	08 95       	ret

00001812 <_exit>:
    1812:	f8 94       	cli

00001814 <__stop_program>:
    1814:	ff cf       	rjmp	.-2      	; 0x1814 <__stop_program>
